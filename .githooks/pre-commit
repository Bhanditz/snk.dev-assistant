#!/bin/sh

# set -x
# set -e

# git config --global alias.ignored = !git ls-files -v | grep "^[[:lower:]]"
# git ls-files -v | grep "^[[:lower:]]"

# export QUERY="dockerfiles alpine"; export EXPORT_FILE=".meta/ghs_snip.${QUERY/ /_}.$(date +%Y-%m-%d).sh"; echo -e "#/bin/sh\n\n# Query: ${QUERY}\n" > ${EXPORT_FILE}; chmod a+x ${EXPORT_FILE}; ghs --max=1000 --token="${GITHUB_TOKEN}" --sort=updated ${QUERY} | cut -d " " -f1 | xargs -I {}  bash -c 'echo "dock https://github.com/{}";' >> ${EXPORT_FILE}
# export QUERY="dockerfiles alpine"; export EXPORT_FILE=".meta/ghs_urls.${QUERY/ /_}.$(date +%Y-%m-%d).tsv";  echo -e "# Query: ${QUERY}\n" > ${EXPORT_FILE}; chmod a+x ${EXPORT_FILE}; ghs --max=1000 --token="${GITHUB_TOKEN}" --sort=updated ${QUERY} | cut -d " " -f1 | xargs -I {}  bash -c 'echo "https://github.com/{}.git";' >> ${EXPORT_FILE}
# export QUERY="dockerfiles alpine"; export EXPORT_FILE=".meta/ghs_results.${QUERY/ /_}.$(date +%Y-%m-%d).tsv";  echo -e "uri\tdescription" > ${EXPORT_FILE}; chmod a+x ${EXPORT_FILE}; ghs --max=1000 --token="${GITHUB_TOKEN}" --sort=updated ${QUERY} | xargs -I {}  bash -c 'echo "github.com/{}";' >> ${EXPORT_FILE}

function fbs { 
	local limit=${1:-"20"}
	du -m . | sort -nr | head -n $limit
}

function fb { 
	local limit=${1:-"20"}
	du -h . | sort -hr | head -n $limit
}

function fbg { 
	local pattern=${1:-"vendor"}
	local limit=${2:-"50"}
	du -h . | grep "$pattern" | sort -hr | head -n $limit
}

function fd { 
	local pattern=${1:-"test"}
	find . -name "$pattern" -type d -exec rm -rf {} +
}

function rm_dirs_by_name { 
	local pattern=${1:-"test"}
	find . -name "$pattern" -type d -print -exec rm -rf {} +
}

function ls_subtrees {
	local export_file=${1:-".meta/ls-subtrees.tsv"}
	ensure_dir
	git log | grep -E 'git-subtree-dir|git-subtree-repo' | awk '{ print $2 $3 $4 }' > $export_file ;
}

function ls_subtrees_sorted {
	local export_file=${1:-".meta/ls-subtrees.sorted.tsv"}
	ensure_dir
	git log | grep -e git-subtree-dir -e git-subtree-repo | tr -d ' ' | cut -d ":" -f2 | sort | uniq > $export_file ;
}

function ls_subtrees_exists {
	local export_file=${1:-".meta/ls-subtrees.exists.tsv"}
	ensure_dir
	git log | grep -e git-subtree-dir -e git-subtree-repo | tr -d ' ' | cut -d ":" -f2 | sort | uniq | xargs -I {} bash -c 'if [ -d $(git rev-parse --show-toplevel)/{} ] ; then echo {}; fi' > $export_file ;
}

function ls_subtrees_dedup {
	local export_file=${1:-".meta/ls-subtrees.dedup.tsv"}
	ensure_dir
	git log | grep git-subtree-dir | tr -d ' ' | cut -d ":" -f2 | sort | uniq | xargs -I {} bash -c 'if [ -d $(git rev-parse --show-toplevel)/{} ] ; then echo {}; fi' > $export_file ;
}

function ensure_dir {
	local prefix_path=${1:-".meta"}
	mkdir -p ${prefix_path}
}

function ls_dirs_size {
	local limit=${1:-"50"}
	local export_file=${1:-".meta/ls-dirs.by_size.top${limit}.output"}
	ensure_dir
	du -m . | sort -nr | head -n $limit > ${export_file}
}

export DEP_DIRNAMES="vendor;Godeps;node_modules"

# rm_dirs_by_name vendor;Godeps;node_modules
rm_dirs_by_name vendor
rm_dirs_by_name Godeps 
rm_dirs_by_name node_modules
echo "Successfully removed all vendor dirs: vendor, Godeps, node_modules"

# ls_dirs_size
# ls_subtrees
# ls_subtrees_sorted
# ls_subtrees_exists
# ls_subtrees_dedup

# git config --global fetch.prune true
# git config --global gc.auto 1
# git config --local gc.auto 1
# git config -l
# git config remote.origin.prune true
# git config --global gc.auto 0
# git config --global gc.aggressive 0
# git config --local gc.auto 1
# git config --local gc.aggressive 1

# git commit -am "remove vendor dirs"
# echo "clean-up vendor directories..."
# echo "Top 50 subtrees by size"

# git config core.hooksPath .githooks