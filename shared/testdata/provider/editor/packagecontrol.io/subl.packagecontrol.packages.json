{"last_seen": "2018-06-23T05:50:27Z", "buy": null, "installs_rank": 2347, "st_versions": [2, 3], "donate": null, "issues": "https://github.com/patriciogonzalezvivo/sublime-glslViewer/issues", "authors": ["patriciogonzalezvivo"], "trending_rank": null, "homepage": "https://packagecontrol.io/packages/glslViewer", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/patriciogonzalezvivo/sublime-glslViewer"], "is_missing": false, "platforms_display": ["OS X", "Linux"], "name": "glslViewer", "last_modified": "2016-01-01T20:38:56Z", "platforms": ["osx", "linux"], "readme_html": "<div><h1>GLSL Viewer plugin for Sublime Text</h1>\n\n<p><img src=\"/readmes/img/c3767b47d7951e2fc5500a0038e527cee63e87cc.gif\" alt=\"\"></p>\n\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=4BQMKQJDQ9XH6\"><img src=\"/readmes/img/1b47cf9a26e146334f99a2a10df8c504288c58f3.gif\" alt=\"Donate\"></a></p>\n\n<p>Sublime Text plugin for live-coding GLSL Shaders using glslViewer ( MACOS X and Linux only).</p>\n\n<h2>Installation</h2>\n\n<ol><li><p>Install <a href=\"https://github.com/patriciogonzalezvivo/glslViewer\">glslViewer</a>. By default it will be installed on <code>/usr/local/bin</code> if that's not the case edit it the <code>glslViewer.sublime-settings</code> file once you finish this steps.</p></li>\n<li><p>You can choose to install the plugin it self with <a href=\"https://packagecontrol.io/\">Package Control</a> or by cloning <a href=\"https://github.com/patriciogonzalezvivo/sublime-glslViewer\">this repository</a> on you <code>Packages</code> Folder. For example:</p></li>\n</ol><div class=\"highlight\"><pre><span class=\"nb\">cd</span> ~/Library/Application Support/Sublime Text 2/Packages/\ngit clone https://github.com/patriciogonzalezvivo/sublime-glslViewer.git\n</pre></div>\n\n<h2>Usage</h2>\n\n<p>Every time you open a <code>.frag</code> or <code>.fs</code> file it will render it through <code>glslViewer</code> which will reload the shader every time you save it.</p>\n\n<p>If the shader contain any <code>uniform sampler2D</code>, a input label will apear down your Sublime Windows where you can enter the absolute or relative path to the image you want to load.</p>\n\n<p>Also if you have a <code>.vert</code> file and/or 3D model (<code>.ply</code> or <code>.obj</code>) with the same name it will open them automatically. </p>\n\n<p><img src=\"/readmes/img/e370f3e2e2ae0439a414a131cff4d0fd517d2e93.gif\" alt=\"\"></p>\n\n<h2>Extra commands</h2>\n\n<p>This plugin adds a GLSL <em>Build System</em> to re lunch <code>glslViewer</code> by pressing <code>Ctr</code>+<code>b</code> and also adds a command to <em>\u201ccreate a new fragment shader template for glslViewer\u201d</em> you can use to start working on a new shader.</p>\n\n<h2>Suggestions</h2>\n\n<p>This plugin plays really well with this two other plugins:</p>\n\n<ul><li><p><a href=\"https://github.com/euler0/sublime-glsl\">Open\u200bGL Shading Language (GLSL)</a></p></li>\n<li><p><a href=\"https://packagecontrol.io/packages/auto-save\">Auto-save</a></p></li>\n</ul><h2>License</h2>\n\n<p><a href=\"https://raw.githubusercontent.com/patriciogonzalezvivo/sublime-glslViewer/master/LICENSE\">MIT License</a></p>\n\n<h2>Author</h2>\n\n<p>glslViewer and this plugin was created and maintained by <a href=\"http://https://twitter.com/patriciogv\">Patricio Gonzalez Vivo</a>: <a href=\"https://github.com/patriciogonzalezvivo\">github</a> | <a href=\"http://https://twitter.com/patriciogv\">twitter</a> | <a href=\"http://patricio.io\">website</a></p></div>", "installs": {"total": 1449, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "platform": "Windows"}, {"totals": [0, 0, 0, 0, 2, 1, 1, 0, 0, 2, 1, 3, 0, 0, 1, 6, 1, 4, 0, 4, 2, 3, 0, 5, 2, 2, 1, 1, 2, 2, 4, 3, 2, 2, 1, 3, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2], "platform": "OS X"}, {"totals": [0, 1, 0, 0, 0, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 2, 3, 0, 1, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 3], "platform": "Linux"}]}, "windows": 5, "linux": 458, "osx": 986}, "removed": false, "first_seen": "2015-04-26T17:21:41Z", "description": "Sublime Text 2/3 plugin for live coding GLSL Shaders", "z_value": null, "versions": [{"platforms": ["osx", "linux"], "st_versions": [2, 3], "version": "0.5.1", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/patriciogonzalezvivo/sublime-glslViewer/master/README.md", "labels": [], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:16:13Z", "buy": null, "installs_rank": 2488, "st_versions": [3], "donate": null, "issues": "https://github.com/oleg-shilo/sublime-codemap/issues", "authors": ["oleg-shilo"], "trending_rank": null, "homepage": "https://github.com/oleg-shilo/sublime-codemap", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/oleg-shilo/sublime-codemap"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "CodeMap", "last_modified": "2018-01-08T02:52:21Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>Sublime CodeMap</h1>\n\n<p>A plugin for displaying the code map (code structure tree) in the <a href=\"http://sublimetext.com\" title=\"Sublime Text\">Sublime Text 3</a> editor.</p>\n\n<p>This plugin is a port of <a href=\"https://marketplace.visualstudio.com/items?itemName=OlegShilo.PyMap\">PyMap</a> Visual Studio extension.</p>\n\n<p>Plugin currently supports building the code tree for Python. Support for C# is in the pipeline. The design of plugin allows integration of the user defined <em>tree building</em> algorithm for other languages. The <em>custom syntax</em> integration infrastructure and and samples will  be available in the next release.</p>\n\n<ul><li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#command-palette\">Command Palette</a></li>\n<li><a href=\"#custom-mapping\">Custom mapping</a>\n\n<ul><li><a href=\"#custom-mapper\">Custom mapper</a></li>\n<li><a href=\"#universal-mapper\">Universal Mapper</a></li>\n<li><a href=\"#map-depth\">Map depth</a></li>\n</ul></li>\n<li><a href=\"#navigation-with-keyboard\">Navigation with Keyboard</a></li>\n<li><a href=\"#settings\">Settings</a></li>\n</ul><p><a name=\"installation\"></a></p>\n\n<h2>Installation</h2>\n\n<p>Note the plugin was developed and tested against ST3 but not ST2.</p>\n\n<p><em><strong>Package Control</strong></em></p>\n\n<p>You can install the pluging <a href=\"https://packagecontrol.io/packages/CodeMap\">Package Control</a>.</p>\n\n<p><em><strong>Manual</strong></em></p>\n\n<ul><li>Remove the package, if installed, using Package Control.</li>\n<li>Add a repository: <code>https://github.com/oleg-shilo/sublime-codemap.git</code></li>\n<li>Install <code>sublime-codemap</code> with Package Control.</li>\n<li>Restart Sublime editor if required</li>\n</ul><p>You can also install the plugin by cloning <code>sublime-codemap</code> repository into your Packages folder or manually placing the download package there.</p>\n\n<p><a name=\"usage\"></a></p>\n\n<h2>Usage</h2>\n\n<p>The plugin uses a dedicated view group <strong>Code - Map</strong> (on right side) to mimic a \u201cside bar\u201d with the content (code tree) that represents code structure of the active view content in the primary view group.</p>\n\n<p>The code tree automatically refreshes on saving the active document or switching the tabs. The usage is quite simple. You can double-click a node in the code tree and this will trigger navigation to the corresponding area in the code (in active document). Alternatively you can synchronize code tree node selection with the current caret position in the document by triggering <code>sync_code_map</code> command either from <em>Command Palette</em> or by the configured shortcut.</p>\n\n<p>To start working with CodeMap just make the map view visible (e.g. [alt+m, alt+m]) and set the focus to the code view.</p>\n\n<p><img src=\"/readmes/img/7ac145343bab608b7f72eb319698d43d085aa355.gif\" alt=\"\"></p>\n\n<p><a name=\"command-palette\"></a></p>\n\n<h2>Command Palette</h2>\n\n<p>Press <code>cmd+shift+p</code>. Type <code>codemap</code> to see the available commands:</p>\n\n<ul><li><p><em><strong>Toggle Visibility</strong></em> - Show/Hide CodeMap view.\nThe CodeMap view is always placed in the most right column (group) of the active window. If <code>show_in_new_group</code> is set to <code>true</code>, a new group will be created.<br>\nDefault keybinding is <strong><code>Alt+m  Alt+m</code></strong></p></li>\n<li><p><em><strong>Reveal in CodeMap</strong></em> - Select code tree node that corresponds the caret position in the code (active view).<br>\nDefault keybinding is <strong><code>Alt+m  Alt+.</code></strong></p></li>\n<li><p><em><strong>Render From View</strong></em> - Attempt to render CodeMap from a view that isn't bound to a phisycal file.<br>\nDefault keybinding is <strong><code>Alt+m  Alt+,</code></strong></p></li>\n</ul><p><a name=\"custom-mapping\"></a></p>\n\n<h2>Custom mapping</h2>\n\n<p><a name=\"custom-mapper\"></a></p>\n\n<h3>Custom mapper</h3>\n\n<p>You can extend the built-in functionality with custom mappers. A Custom Mapper is a Python script, which defines a mandatory <code>def generate(file)</code> routine that analyses a given file content and produces a 'code map' representing the content structure.</p>\n\n<p>You can find the <a href=\"https://github.com/oleg-shilo/sublime-codemap/blob/master/custom_mappers/md.py\">md.py</a> sample in the source code. This mapper builds the list of markdown sections in the given text file.\nIn order to activate the mapper its script needs to be properly named and placed in the special folder: <code>&lt;Packages&gt;\\User\\CodeMap\\custom_mappers</code>. The name of the mapper file must follow a special naming convention:\n<code>\"&lt;extension&gt;.py\"</code></p>\n\n<p>Example: <code>\"%APPDATA%\\Sublime Text 3\\Packages\\User\\CodeMap\\custom_mappers\\md.py\"</code></p>\n\n<p>You can associate a syntax with the custom mapper, so that the CodeMap will use it for rendering the map content. Custom syntaxes can also be put in <code>Packages\\User\\CodeMap\\custom_languages</code>. The syntax association must be specified in the custom mapper itself:</p>\n<div class=\"highlight\"><pre><span class=\"n\">map_syntax</span> <span class=\"o\">=</span> <span class=\"s\">'Packages/Python/Python.tmLanguage'</span>\n</pre></div>\n\n<p>Python syntax seems to be a good highlighting schema for majority of mapping scenarios.</p>\n\n<p><a name=\"universal-mapper\"></a></p>\n\n<h3>Universal Mapper</h3>\n\n<p>The <em>universal mapper</em> is a generic Regex based mapper that can be used as an alternative for dedicated custom mappers. The mapping algorithm(s) of the <em>universal mapper</em> is defined in the plugin settings, and is extension-dependent.</p>\n\n<p>The plugin will always try to use <em>universal mapper</em> mapping algorithm first, and only if it's not available the plugin will try to locate a dedicated custom mapper based on the active document file extension. Full instructions on how to make a custom mapper using the <em>universal mapper</em> are included in the settings file.</p>\n\n<p>Note that if you use a custom mapper for an extension that is already defined in the <em>universal mapper</em> settings, the latter will have precedence. Comment out the extension in the <em>universal mapper</em> section to use your custom mapper in its place.</p>\n\n<p>The advantage of using the <em>universal mapper</em> (and define new rules for it when needed) is that it supports by default the map depth system, with which you can alter the depth of the displayed map. Custom mappers need to support this system internally.</p>\n\n<p>Below is a simple example of adding <em>universal mapper</em> support for TypeScript:</p>\n\n<p>Add file extension (e.g. '<em>ts</em>') and name of the algorithm section to the <code>syntaxes</code> section:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"syntaxes\"</span><span class=\"err\">:</span>     <span class=\"p\">[</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"universal\"</span><span class=\"p\">,</span>   <span class=\"s2\">\"\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"txt\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"typescript\"</span><span class=\"p\">,</span>  <span class=\"s2\">\"ts\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"python\"</span><span class=\"p\">,</span>      <span class=\"s2\">\"py\"</span><span class=\"p\">]</span>\n                <span class=\"p\">]</span><span class=\"err\">,</span>\n</pre></div>\n\n<p>Create a new <code>typescript</code> section an fill it with the the following content:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"typescript\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"regex\"</span><span class=\"p\">:</span>\n                <span class=\"p\">[</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">\"^(class |function |export class |interface ).*$\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"[(:{].*$\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n                        <span class=\"kc\">false</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">],</span>\n                <span class=\"nt\">\"indent\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"obligatory indent\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"empty line in map before\"</span><span class=\"p\">:</span> <span class=\"s2\">\"class\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"line numbers before\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"prefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"suffix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"()\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"syntax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Packages/TypeScript/TypeScript.tmLanguage\"</span>\n             <span class=\"p\">}</span><span class=\"err\">,</span>\n</pre></div>\n\n<p><a name=\"map-depth\"></a></p>\n\n<h3>Map depth</h3>\n\n<p>If using the <em>universal mapper</em> or a dedicated mapper that supports it, you can change the depth of the displayed map. Default hotkeys are:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"alt+m\", \"alt+left\"], \"command\": \"code_map_decrease_depth\" },\n{ \"keys\": [\"alt+m\", \"alt+right\"],\"command\": \"code_map_increase_depth\" },\n</pre></div>\n\n<p><a name=\"navigation-with-keyboard\"></a></p>\n\n<h2>Navigation with Keyboard</h2>\n\n<p>You can start keyboard navigation with <strong><code>Al+m, Alt+n</code></strong>. Then use the following keys: </p>\n<div class=\"highlight\"><pre>up / down                   move by definition\nalt+up / alt+down           move by class\nenter/escape/left/right     focus back on edited view\n</pre></div>\n\n<p><a name=\"settings\"></a></p>\n\n<h2>Settings</h2>\n\n<p>You can also configure plugin to:\n1. Hide the group on closing the CodeMap view when it is the only view in the group.\n2. Always place CodeMap view in the individual most-right column.\n3. CodeMap group width.\n4. Assign a custom font size/font face/margin for the CodeMap.</p>\n\n<p><em>code</em>_<em>map.sublime-settings</em></p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"close_empty_group_on_closing_map\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"show_in_new_group\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"s2\">\"codemap_width\"</span><span class=\"o\">:</span> <span class=\"mf\">0.17</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_font_size\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_font_face\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Verily Serif Mono\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_margin\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div></div>", "installs": {"total": 1231, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 5, 1, 3, 4, 0, 0, 1, 1, 8, 1, 3, 4, 0, 1, 3, 1, 3, 4, 1, 4, 1, 2, 1, 1, 0, 1, 1, 0, 2, 5, 4, 3, 0, 3, 0, 2, 5, 1, 6, 2, 2, 1, 2, 1, 4], "platform": "Windows"}, {"totals": [0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 0, 0, 0, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], "platform": "OS X"}, {"totals": [0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 4, 2, 1], "platform": "Linux"}]}, "windows": 669, "linux": 258, "osx": 304}, "removed": false, "first_seen": "2017-03-03T17:16:27Z", "description": "CodeMap - is a ST3 plugin for showing the code tree representing the code structure of the active view/document", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [3], "version": "1.0.13", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/oleg-shilo/sublime-codemap/master/README.md", "labels": [], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:29:12Z", "buy": null, "installs_rank": 497, "st_versions": [2, 3], "donate": null, "issues": "https://bitbucket.org/bteryek/openinbrowser/issues", "authors": ["bteryek"], "trending_rank": null, "homepage": "http://idevelopsolutions.com/OpenInBrowser", "sources": ["https://packagecontrol.io/repository.json", "https://bitbucket.org/bteryek/openinbrowser"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "OpenInBrowser", "last_modified": "2013-09-13T19:49:48Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>OpenInBrowser</h1>\n\n<p>On save opens up a user defined URL in your default web browser.</p>\n\n<h2>Introduction</h2>\n\n<p>There are several plugins out there that will refresh or open up a file in the browser. However, they are usually limited to opening open the file you are working on. </p>\n\n<p>With OpenInBrowser, when you save a file, we scan your configuration settings and look for a match against the current file. If the file you saved matches the pattern you specified, OpenInBrowser will open up the associated url in your default web browser.</p>\n\n<h2>Configuration</h2>\n\n<p>The configuration file is an array of objects. Each object has a single key, which is the pattern to test the saved file against. The value is the associated url you want to open if the file is matched.</p>\n\n<p>Each object is checked in the order they appear in the array. Once it finds a match, it will execute and open up the associated url.</p>\n<div class=\"highlight\"><pre>[\n\n    {\"index.html\": \"http://idevelopsolutions.com\"},\n    {\"index.(html|php)\": \"http://idevelopsolutions.com\"},\n    {\"index.(html|php)\": \"http://idevelopsolutions.com/index.$1\"}\n\n]\n</pre></div>\n\n<p><strong>Simple Match</strong></p>\n<div class=\"highlight\"><pre>{\"index.html\": \"http://idevelopsolutions.com\"}\n</pre></div>\n\n<p>If you are working on a file that matches the \u201cindex.html\u201d pattern, it will open up <a href=\"http://idevelopsolutions.com\">http://idevelopsolutions.com</a></p>\n\n<p><strong>Regex Match</strong></p>\n<div class=\"highlight\"><pre>{\"index.(html|php)\": \"http://idevelopsolutions.com\"}\n</pre></div>\n\n<p>Files that match \u201cindex.html\u201d or \u201cindex.php\u201d will open up <a href=\"http://idevelopsolutions.com\">http://idevelopsolutions.com</a></p>\n\n<p><strong>Advanced Regex Match</strong></p>\n\n<p>If you want to use groups from the regex pattern in the url you wish to open, use <strong>$n</strong> syntax to backreference a group.</p>\n<div class=\"highlight\"><pre>{\"index.(html|php)\": \"http://idevelopsolutions.com/index.$1\"}\n</pre></div>\n\n<p>Files that match index.html or index.php will open up </p>\n\n<ul><li><a href=\"http://idevelopsolutions.com/index.html\">http://idevelopsolutions.com/index.html</a> or </li>\n<li><a href=\"http://idevelopsolutions.com/index.php\">http://idevelopsolutions.com/index.php</a></li>\n</ul><h2>Install From Package Control</h2>\n\n<ol><li>Search for OpenInBrowser.</li>\n</ol><h2>Install Manually:</h2>\n\n<ol><li>Create a folder in the packages directory called \u201cOpenInBrowser\u201d</li>\n<li>Download the latest tag, unzip and place the files in the  \u201cOpenInBrowser\u201d directory.</li>\n</ol><h2>Video Tutorial</h2>\n\n<p><a href=\"http://www.youtube.com/watch?v=MCmIazjhq9A\">http://www.youtube.com/watch?v=MCmIazjhq9A</a></p>\n\n<h2>Install Duplicate Tab Plugin for your Browser</h2>\n\n<p>It is highly recommended you install a duplicate tab plugin for your web browser if you do not want to keep opening up the same url(s) in new tabs.</p>\n\n<p>I wrote a Chrome plugin that works with OpenInBrowser Plugin:</p>\n\n<ul><li><a href=\"https://chrome.google.com/webstore/detail/openinbrowser/ddjnoikeiiiialgjgmanaienongjhamn\">OpenInBrowser Chrome Plugin</a></li>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/duplicate-tab-closer/?src=api\">Firefox</a></li>\n</ul><p>Check out my other plugin:</p>\n\n<ul><li><a href=\"https://bitbucket.org/bteryek/phpcodegen\">PhpCodeGen</a></li>\n</ul></div>", "installs": {"total": 24233, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [3, 7, 9, 17, 19, 12, 8, 10, 12, 8, 13, 13, 11, 5, 15, 5, 6, 17, 31, 13, 5, 14, 7, 10, 10, 13, 11, 10, 9, 8, 4, 30, 13, 16, 8, 6, 8, 16, 18, 16, 13, 8, 13, 13, 20, 17], "platform": "Windows"}, {"totals": [1, 1, 2, 5, 4, 2, 0, 1, 4, 2, 4, 1, 6, 1, 1, 2, 1, 6, 4, 7, 3, 1, 2, 3, 4, 2, 2, 2, 2, 1, 5, 5, 1, 0, 1, 1, 2, 4, 8, 0, 2, 1, 2, 3, 4, 2], "platform": "OS X"}, {"totals": [0, 0, 2, 0, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 2, 6, 1, 3, 3, 0, 0, 2, 0, 2, 0, 3, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 2, 2, 1, 0, 3, 5, 0], "platform": "Linux"}]}, "windows": 16164, "linux": 2403, "osx": 5666}, "removed": false, "first_seen": "2013-09-10T22:25:16Z", "description": "On save opens up a user defined URL in your default web browser", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "1.0.1", "prerelease_version": null}], "readme": "https://bitbucket.org/bteryek/openinbrowser/raw/master/README.md", "labels": ["browser", "open in browser", "refresh", "preview", "browser preview"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T07:10:41Z", "buy": null, "installs_rank": 2932, "st_versions": [3], "donate": null, "issues": "https://github.com/Wramberg/FindInProject/issues", "authors": ["Wramberg"], "trending_rank": null, "homepage": "https://github.com/Wramberg/FindInProject", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/Wramberg/FindInProject"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "FindInProject", "last_modified": "2018-05-27T08:12:48Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>FindInProject</h1>\n\n<p>Text search plugin for Sublime Text 3 projects.</p>\n\n<p>This is an alternative to the default \u201cFind in files\u201d command that comes with\nSublime Text.  It includes an interactive result view and a configurable search\nthread that runs in the background.</p>\n\n<p>Results are ordered using basic implementations of the TF-IDF and Page-Rank\nalgorithms.</p>\n\n<p><img src=\"/readmes/img/878ec1ea65cab08ba1b1d8eb192f8148def951d7.gif\" alt=\"example.gif\" title=\"Example of use\"></p>\n\n<h2>Installation</h2>\n\n<p>The plugin is tested on Windows and Linux but should also work on macOS.\nTo install it from <a href=\"https://packagecontrol.io/\">https://packagecontrol.io/</a> do the following:</p>\n\n<ol><li>Open the command palette and find \u201cPackage Control: Install Package\u201d</li>\n<li>Search for FindInProject and install.</li>\n</ol><p>To install from GitHub do the following:</p>\n\n<ol><li>Locate Sublime Text packages folder by choosing the menu:</li>\n</ol><div class=\"highlight\"><pre>Preferences -&gt; Browse Packages...\n</pre></div>\n\n<ol><li>Clone or download git repository into a new folder named \u201cFindInProject\u201d under the packages folder</li>\n</ol><h2>Configuration</h2>\n\n<p>All configuration is available through the menu:</p>\n<div class=\"highlight\"><pre>Preferences -&gt; Package Settings -&gt; FindInProject\n</pre></div>\n\n<p>This includes</p>\n\n<ul><li>Default settings which can be copied into the user settings and then changed</li>\n<li>Default keymap which can overridden in the user keymap</li>\n<li>Default color scheme which can be copied into the user color scheme and then changed</li>\n</ul><p>The settings include options for</p>\n\n<ul><li>Encodings to try</li>\n<li>Maximum line length in result view</li>\n<li>Directories and file extensions to ignore</li>\n<li>File sizes to ignore</li>\n<li>Excessive hit count (to cancel large searches)</li>\n<li>Term separation regex pattern (defaults to non-word characters such as\nwhitespace and punctuation)</li>\n<li>Page reference regex pattern (defaults to double square brackets\naround word characters, for example <code>[[SamplePage]]</code>)</li>\n<li>and more (descriptive comments are included in the settings file)</li>\n</ul><h2>Usage</h2>\n\n<p>In normal contexts (using the default keymap) the following shortcut is available.</p>\n\n<table><thead><tr><th>Shortcut</th>\n<th>Command</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>ctrl+shift+f</code></td>\n<td>find_in_project</td>\n<td>Opens FindInProject input panel</td>\n</tr></tbody></table><p>When in a result view (using the default keymap) the following shortcuts are available.</p>\n\n<table><thead><tr><th>Shortcut / Action</th>\n<th>Command</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>up</code> / <code>down</code></td>\n<td>find_in_project_next_line</td>\n<td>Browse back / forward in results</td>\n</tr><tr><td><code>Pageup</code> / <code>Pagedown</code></td>\n<td>find_in_project_next_file</td>\n<td>Browse back / forward between files</td>\n</tr><tr><td><code>Left</code> / <code>Right</code></td>\n<td>find_in_project_fold</td>\n<td>Fold / Unfold results within the selected file</td>\n</tr><tr><td><code>Enter</code> / <code>Double-click</code></td>\n<td>find_in_project_open_result</td>\n<td>Open currently selected result</td>\n</tr></tbody></table><p>For details see the keymap file available through the menu:</p>\n<div class=\"highlight\"><pre>Preferences-&gt;Package Settings-&gt;FindInProject* menu.\n</pre></div>\n\n<h2>TF-IDF Algorithm</h2>\n\n<p>The term frequency (TF) inverse document frequency (IDF) algorithm scans all files during\nthe document indexing process and extracts from each file a set of terms.  These terms are\nadded to both the overall dictionary and the current document's dictionary and count the\nnumber of times each term is used.  These counts are normalised to the total number of terms\nin document and inserted into the IDF map.</p>\n\n<p>The search queries terms are used to calculate a score per document using:</p>\n<div class=\"highlight\"><pre>doc_score = SUM (search_term.normal + document_term.normal) / len(overall_terms)\n                FOR search_term in search_terms\n                IF search_term in document_terms\n                WHERE document_term = document_terms[search_term]\n</pre></div>\n\n<p>Each document term's score is checked against the threshold constant to determine if\nthis document should be included in the results.  The score is merged with the other\nsearch scores using a weighted average.</p>\n\n<p>Related settings:\n* <code>find_in_project_term_threshold</code>\n    - The search term score threshold for inclusion in the results\n* <code>find_in_project_terms_weight</code>\n    - The document terms score <code>weighting</code> used in calculating the weighted average\n* <code>find_in_project_term_separator_pattern</code>\n    - The regular expression uses to split the contents of a file into terms</p>\n\n<h2>Page Rank Algorithm</h2>\n\n<p>The page rank algorithm identifies page references within each file where each page name\nis derived from the filename by removing the path and extension.  Page references are\n(by default) just a page name surrounded by double square brackets.</p>\n\n<p>Each file is scanned as part of the document indexing process and is added to the graph\nof page nodes with all page reference being added as links in the graph to other page\nnodes.</p>\n\n<p>Once all files have been scanned then the page rank algorithm is calculates the page\nrank scores as follows:</p>\n<div class=\"highlight\"><pre>DEF calculate_ranks:\n    FOR page IN graph\n        ranks[page] = (1 - damping) / len(graph) +\n                        damping *\n                            SUM ranks[in_page] / in_page.out_count\n                                FOR in_page IN page.in_links\n</pre></div>\n\n<p>This is repeated using an iterative approach, where each iteration calculates the next\nset of ranks until sum of the deltas between successive rank scores is less than some\nspecified threshold (epsilon):</p>\n<div class=\"highlight\"><pre>ranks = MAP page: 1 / len(graph) FOR page IN graph\n\nWHILE delta &gt; epsilon\n    WHERE delta = SUM abs(ranks[page] - prev_ranks[page])\n        FOR page IN graph\n\n    prev_ranks = COPY(ranks)\n    calculate_ranks()\n}\n</pre></div>\n\n<p>Each page rank score is merged with the other search scores using a weighted average.</p>\n\n<p>Related settings:\n* <code>find_in_project_disable_page_rank</code>\n    - If set to <code>true</code>, then the page rank algorithm will not be used\n* <code>find_in_project_page_ref_pattern</code>\n    - The regular expression used to identify page references with a file\n* <code>find_in_project_page_rank_damping</code>\n    - The page rank <code>damping</code> used in calculating the page rank in each iteration\n* <code>find_in_project_page_rank_epsilon</code>\n    - The page rank <code>epsilon</code> used in determining when to stop iterating\n* <code>find_in_project_ranks_weight</code>\n    - The page rank score <code>weighting</code> used in calculating the weighted average</p>\n\n<h2>Mouse events</h2>\n\n<p>The current implementation of sublime allows simple mouse event mappings, however\nthese mappings do <em>not</em> support selector contexts.  As such, any mapping may\nconflict with other mappings defined.</p>\n\n<p>The default handling of the double-click mouse event is to select and find the word\ndouble clicked.  The command <code>find_in_project_mouse_event</code> has been added to\nprovide support for selector contexts.  This allows a custom mapping for the\ndouble-click mouse event to support both actions depending on selector context,\nfor example:</p>\n\n<p>File <code>${USER}/AppData/Roaming/Sublime Text 3/Packages/User/Default.sublime-mousemap</code>:</p>\n<div class=\"highlight\"><pre><span class=\"p\">[{</span>\n        <span class=\"nt\">\"button\"</span><span class=\"p\">:</span> <span class=\"s2\">\"button1\"</span><span class=\"p\">,</span> <span class=\"nt\">\"count\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"find_in_project_mouse_event\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"commands\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"find_in_project_open_result\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"run_for_selector\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text.findinproject\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"find_under_expand\"</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]}</span>\n    <span class=\"p\">}]</span>\n</pre></div>\n\n<h2>Releases</h2>\n\n<ul><li>0.1.0: Initial version\n\n<ul><li>Searches all files in project and displays results in separate buffer.</li>\n</ul></li>\n<li>0.2.0: Enhanced search\n\n<ul><li>Basic implementations of the TF-IDF and page-rank algorithms.</li>\n</ul></li>\n<li>0.2.1: Usablity tweaks\n\n<ul><li>Display query in result buffer.</li>\n<li>Double-click to open result.</li>\n</ul></li>\n</ul></div>", "installs": {"total": 696, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 2, 1, 2, 2, 4, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 3, 1, 1, 0, 0, 1, 0, 1, 3, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 1, 3, 1], "platform": "Windows"}, {"totals": [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], "platform": "OS X"}, {"totals": [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0], "platform": "Linux"}]}, "windows": 363, "linux": 145, "osx": 188}, "removed": false, "first_seen": "2017-05-31T22:41:54Z", "description": "Text search plugin for Sublime Text 3 projects", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "0.2.1", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/Wramberg/FindInProject/master/README.md", "labels": ["find", "search", "project"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:24:45Z", "buy": null, "installs_rank": 2440, "st_versions": [3], "donate": null, "issues": "https://github.com/Enteleform/ST_SlideNav/issues", "authors": ["Enteleform"], "trending_rank": null, "homepage": "https://github.com/Enteleform/ST_SlideNav", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/Enteleform/ST_SlideNav"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "SlideNav", "last_modified": "2016-03-02T23:00:11Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>SlideNav</h1>\n\n<p>Easily create slide presentations in Sublime Text with SlideNav</p>\n\n<p>Also includes a file launcher to quickly open media files during your presentation</p>\n\n<h2>SECTIONS</h2>\n\n<p><a href=\"https://github.com/Enteleform/ST_SlideNav#demo\">Demo</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#features\">Features</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#getting-started\">Getting Started</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#commands\">Commands</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#customization\">Customization</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#extras\">Extras</a> \u00a0| \u00a0<a href=\"https://github.com/Enteleform/ST_SlideNav#feedback\">Feedback</a>  </p>\n\n<h2>DEMO</h2>\n\n<p>This GIF has 3 components:  </p>\n\n<ul><li><strong>Top-Left:</strong> A Vysor clone of my Android phone screen.  I am running the entire demo from my phone, using the included preset for UnifiedRemote.<br></li>\n<li><strong>Bottom-Left:</strong> A key-capture window displaying all commands which are being executed by UnifiedRemote<br></li>\n<li><strong>Right:</strong> SlideNav in action<br></li>\n</ul><p><img src=\"/readmes/img/d20fe26cdd5feb454469a88b3556efc306061190.gif\" alt=\"Overview\"></p>\n\n<h2>FEATURES</h2>\n\n<h3>Slides</h3>\n\n<ul><li>Divide your document with Slides<br></li>\n<li>Navigate through the document slide by slide ( any content not in the current slide is folded )<br></li>\n</ul><h3>MediaFiles, MediaLinks, TextLinks, &amp; LinkNav</h3>\n\n<ul><li><p>Launch files during your presentation with MediaLinks  </p>\n\n<ul><li>MediaLinks can be launched automatically with LinkNav, upon clicking, or with a hotkey<br></li>\n<li>List your MediaFiles before your first slide, and access them from any of your slides via MediaLink<br></li>\n<li>Define applications &amp; extensions @ <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/SlideNav.sublime-settings#L127\">SlideNav.sublime-settings</a></strong><br></li>\n</ul></li>\n<li><p>Textlinks allow you to define segments of text to highlight during the presentation  </p></li>\n<li><p>LinkNav automatically moves through your presentation by MediaLink &amp; TextLink sections  </p></li>\n</ul><h3>Remote Control</h3>\n\n<ul><li>Included in <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/tree/master/UnifiedRemote\">/UnifiedRemote</a></strong> is a custom preset for Unified Remote<br></li>\n<li>Unified Remote can be installed on your Android/IOS devices to control your PC/Mac computer!<br></li>\n<li>More info at <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/UnifiedRemote/README.md\">UnifiedRemote/README.md</a></strong><br></li>\n</ul><h3>Snippets</h3>\n\n<ul><li>Slide dividers, MediaFiles, MediaLinks, &amp; TextLinks are generated automatically via hotkey<br></li>\n</ul><p><img src=\"/readmes/img/654fa92a1b51c8868cc6e27cb0830c35ab062aaf.gif\" alt=\"Snippets\"></p>\n\n<h2>GETTING STARTED</h2>\n\n<p>To get started, see:  </p>\n\n<ul><li><strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/Tutorial/%5BSlideNav%5D%20Tutorial.py\">SlideNav Interactive Tutorial</a></strong><br></li>\n<li><strong><a href=\"https://github.com/Enteleform/ST_SlideNav/issues/1\">How do I create new presentation?</a></strong><br></li>\n</ul><p>In order to get the most functionality out of SlideNav, read the comments @ <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/SlideNav.sublime-settings\">SlideNav.sublime-settings</a></strong></p>\n\n<h2>COMMANDS</h2>\n\n<p>These are the included commands &amp; default keybindings:</p>\n\n<h3>Navigate Slides</h3>\n\n<ul><li>Both SlideNav commands will automatically show the first slide when they are first used<br></li>\n</ul><p>\u00a0\u00a0\u00a0\u00a0<code>SlideNav_Down</code> ( show next Slide )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>super</kbd>+<kbd>alt</kbd>+<kbd>=</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>SlideNav_Up</code> ( show previous Slide )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>super</kbd>+<kbd>alt</kbd>+<kbd>-</kbd>  </p>\n\n<h3>Navigate Links</h3>\n\n<ul><li>Both LinkNav commands are limited to Links that are currently Visible, meaning you can use them without accidentally moving into the next slide<br></li>\n</ul><p>\u00a0\u00a0\u00a0\u00a0<code>LinkNav_Down</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>=</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>LinkNav_Up</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>-</kbd>  </p>\n\n<h3>Zoom</h3>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Zoom_In</code> ( zoom to selected Slide - Slide title line must be selected )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>=</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Zoom_Out</code> ( exit Slide &amp; show full document )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>-</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Reset_Zoom</code> ( removes zoom level &amp; shows text @ default font size )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>0</kbd>  </p>\n\n<h3>Insert Snippets</h3>\n\n<ul><li><p>Slide, MediaFile, &amp; MediaLink snippet commands can be used:  </p>\n\n<ul><li>on lines with text ( first text area will automatically use line's text )<br></li>\n<li>on blank lines     ( first text area will automatically be selected )<br></li>\n</ul></li>\n<li><p>The TextLink snippet command can be used:  </p>\n\n<ul><li>on single lines ( LinkNav will select the affected line )<br></li>\n<li>on multiple lines ( LinkNav will select the affected lines )<br></li>\n</ul></li>\n</ul><p>\u00a0\u00a0\u00a0\u00a0<code>Insert_Slide</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>super</kbd>+<kbd>alt</kbd>+<kbd>.</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Insert_MediaFile</code> ( MediaLink + path )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>super</kbd>+<kbd>.</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Insert_MediaLink</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>.</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Insert_TextLink</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>.</kbd>  </p>\n\n<h3>MediaLink</h3>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Open_MediaLink</code><br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>o</kbd>  </p>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Toggle_MediaLink</code> ( enable/disable automatically opening MediaLinks on click )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>alt</kbd>+<kbd>.</kbd>  </p>\n\n<h3>Slides</h3>\n\n<p>\u00a0\u00a0\u00a0\u00a0<code>Align</code> ( resizes all Slide titles to same length )<br>\n\u00a0\u00a0\u00a0\u00a0<kbd>ctrl</kbd>+<kbd>super</kbd>+<kbd>.</kbd>  </p>\n\n<h2>CUSTOMIZATION</h2>\n\n<p>Modifications available @ <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/SlideNav.sublime-settings\">SlideNav.sublime-settings</a></strong></p>\n\n<ul><li>Define Snippet Visual Styles<br></li>\n<li>Define MediaLink Applications &amp; Their Associated Extensions<br></li>\n<li>Define Presentation FileTypes &amp; Comment Characters ( required for any filetype you want to use SlideNav with )<br></li>\n</ul><h2>EXTRAS</h2>\n\n<p>I recommend using <strong><a href=\"https://packagecontrol.io/packages/ASCII%20Decorator\">ASCII Decorator</a></strong> paired with my <strong><a href=\"https://github.com/Enteleform/ST_SlideNav/blob/master/ASCII%20Decorator/ASCII%20Decorator.sublime-settings\">Sublime-Settings</a></strong> file.\nIt's a quick &amp; easy way to add visual contast and emphasis to your presentations.</p>\n\n<p>This <strong><a href=\"http://www.text-image.com/convert/ascii.html\">Image To ASCII Converter</a></strong> is great for turning your favorite [ memes | images | whatever ] into text that you can include in your presentations.</p>\n\n<h2>FEEDBACK</h2>\n\n<p>So far, SlideNav has only been tested with Windows 10 &amp; SublimeText 3.</p>\n\n<p>This is my first release! Feel free to contact me at <a href=\"mailto:enteleform@gmail.com\">enteleform@gmail.com</a> with any feedback!</p></div>", "installs": {"total": 1298, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 1, 1, 3, 2, 0], "platform": "Windows"}, {"totals": [0, 3, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], "platform": "OS X"}, {"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "platform": "Linux"}]}, "windows": 917, "linux": 161, "osx": 220}, "removed": false, "first_seen": "2016-02-19T23:56:55Z", "description": "Easy Presentations & File Launcher.  Remote Control to Navigate Slides, Select Text, & Launch Files.", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [3], "version": "1.0.8", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/Enteleform/ST_SlideNav/master/README.md", "labels": ["presentation", "lightning talk", "slide", "slides", "slideshow", "navigation", "code navigation", "file manager", "launcher", "file launcher", "open files", "remote control"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:41:24Z", "buy": null, "installs_rank": 6, "st_versions": [2, 3], "donate": "https://sublimecodeintel.github.io/donate.html", "issues": "https://github.com/SublimeCodeIntel/SublimeCodeIntel/issues", "authors": ["Kronuz"], "trending_rank": null, "homepage": "https://sublimecodeintel.github.io/", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/SublimeCodeIntel/SublimeCodeIntel"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "SublimeCodeIntel", "last_modified": "2017-11-07T14:46:07Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>SublimeCodeIntel</h1>\n\n<p>This Code Intelligence plugin for <a href=\"https://www.sublimetext.com\">Sublime Text</a>\nprovides an interface to <a href=\"http://pypi.python.org/pypi/CodeIntel\">CodeIntel</a>.\nCodeIntel is a code intelligence engine that was ported from\n<a href=\"http://www.openkomodo.com\">Open Komodo Editor</a> to a stand-alone Python package.</p>\n\n<p>CodeIntel supports all the languages Komodo Editor supports for Code Intelligence\n(CIX, CodeIntel2) and a few others:</p>\n\n<blockquote>\n<p>ActionScript, Django, Docker, EJS, epMojo, HTML, KomodoSnippet,\nLaravelBlade, Mason, Mustache, MXML, PHP, R, reStructuredText, RHTML,\nSmarty, TracWiki, TemplateToolkit, Twig, XBL, XML, XSLT, XUL, Python,\nPython3, Ruby, Perl, Go, ECMAScript, JavaScript, Node.js, CSS, SCSS, Sass,\nLess, HTML5, Tcl, C/C++, Objective-C.</p>\n</blockquote>\n\n<p>The plugin provides the following features:</p>\n\n<ul><li>  Jump to Symbol Definition - Jump to the file and line of the\ndefinition of a symbol.</li>\n<li>  Imports autocomplete - Shows autocomplete with the available\nmodules/symbols in real time.</li>\n<li>  Function Call tooltips - Displays information in the status bar\nabout the working function.</li>\n</ul><p>The package should work in all three platforms (MacOS X, Windows and Linux).</p>\n\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=VVX4Q9H3924LE\"><img src=\"/readmes/img/d0696fa5aefd283edcd758f8d1c59e7bc6616a2c.gif\" alt=\"Click here to lend your support to CodeIntel/SublimeCodeIntel and make a donation!\"></a></p>\n\n<h2>CodeIntel Installation</h2>\n\n<p>Before installing <code>SublimeCodeIntel</code>, you must ensure that <code>CodeIntel</code> is installed\non your system. To install <code>CodeIntel</code>, do the following:</p>\n\n<ol><li><p>Install <a href=\"http://python.org\">Python</a> and <a href=\"http://www.pip-installer.org/en/latest/installing.html\">pip</a> (Python 3 requires pip3).</p></li>\n<li><p>Install <code>CodeIntel</code> by typing the following in a terminal:</p></li>\n</ol><div class=\"highlight\"><pre># For Python 2\n   [sudo] pip install --upgrade --pre CodeIntel\n\n   # For Python 3\n   [sudo] pip3 install --upgrade --pre CodeIntel\n</pre></div>\n\n<p><strong>Note:</strong> <code>SublimeCodeIntel</code> requires <code>CodeIntel</code> 2.0 or later.</p>\n\n<h2>Plugin Installation</h2>\n\n<p><strong>With the Package Control plugin:</strong> The easiest way to install\n<code>SublimeCodeIntel</code> is through Package Control, which can be found at\nthis site: <a href=\"http://wbond.net/sublime_packages/package_control\">http://wbond.net/sublime_packages/package_control</a></p>\n\n<p>Once you install Package Control, restart Sublime Text and bring up the\nCommand Palette (<code>Command+Shift+P</code> on OS X, <code>Control+Shift+P</code> on\nLinux/Windows). Select \u201cPackage Control: Install Package\u201d, wait while\nPackage Control fetches the latest package list, then select\nSublimeCodeIntel when the list appears. The advantage of using this\nmethod is that Package Control will automatically keep SublimeCodeIntel\nup to date with the latest version.</p>\n\n<p>**Without <a href=\"https://github.com/SublimeCodeIntel/SublimeCodeIntel/blob/master/Git:**\">Git:**</a> Download the latest source from\n<a href=\"http://github.com/SublimeCodeIntel/SublimeCodeIntel\">GitHub</a> and copy\nthe whole directory into the Packages directory.</p>\n\n<p>**With <a href=\"https://github.com/SublimeCodeIntel/SublimeCodeIntel/blob/master/Git:**\">Git:**</a> Clone the repository in your Sublime Text Packages\ndirectory, located somewhere in user's \u201cHome\u201d directory:</p>\n<div class=\"highlight\"><pre>git clone git://github.com/SublimeCodeIntel/SublimeCodeIntel.git\n</pre></div>\n\n<p>The \u201cPackages\u201d packages directory is located differently in different\nplatforms. To access the directory use:</p>\n\n<ul><li><p>OS X:</p>\n<div class=\"highlight\"><pre>Sublime Text -&gt; Preferences -&gt; Browse Packages...\n</pre></div></li>\n<li><p>Linux:</p>\n<div class=\"highlight\"><pre>Preferences -&gt; Browse Packages...\n</pre></div></li>\n<li><p>Windows:</p>\n<div class=\"highlight\"><pre>Preferences -&gt; Browse Packages...\n</pre></div></li>\n</ul><h2>Using</h2>\n\n<ul><li><p>Start typing code as usual, autocomplete will pop up whenever it's\navailable. SublimeCodeIntel will also allow you to jump around\nsymbol definitions even across files with just a click ..and back.</p>\n\n<p>For Mac OS X:</p>\n\n<ul><li>  Jump to definition = <code>Control+Click</code></li>\n<li>  Jump to definition = <code>Control+Command+Alt+Up</code></li>\n<li>  Go back = <code>Control+Command+Alt+Left</code></li>\n<li>  Manual Code Intelligence = <code>Control+Shift+space</code></li>\n</ul><p>For Linux:\n-   Jump to definition = <code>Super+Click</code>\n-   Jump to definition = <code>Control+Super+Alt+Up</code>\n-   Go back = <code>Control+Super+Alt+Left</code>\n-   Manual Code Intelligence = <code>Control+Shift+space</code></p>\n\n<p>For Windows:\n-   Jump to definition = <code>Alt+Click</code>\n-   Jump to definition = <code>Control+Windows+Alt+Up</code>\n-   Go back = <code>Control+Windows+Alt+Left</code>\n-   Manual Code Intelligence = <code>Control+Shift+space</code></p></li>\n</ul><p>Don't despair! The first time you use it it needs to build some indexes\nand it can take more than a few seconds.</p>\n\n<p>It just works!</p>\n\n<h2>Configuring</h2>\n\n<p>For adding additional library paths (django and extra libs paths for\nPython or extra paths to look for .js files for JavaScript for example),\neither add those paths as folders to your Sublime Text project, or\nmodify SublimeCodeIntel User settings. User settings can be configured\nin the User File Settings:</p>\n\n<p>Do NOT edit the default SublimeCodeIntel settings. Your changes will be\nlost when SublimeCodeIntel is updated. ALWAYS edit the user\nSublimeCodeIntel settings by selecting \u201cPreferences-&gt;Package\nSettings-&gt;SublimeCodeIntel-&gt;Settings - User\u201d. Note that individual\nsettings you include in your user settings will <strong>completely</strong> replace\nthe corresponding default setting, so you must provide that setting in\nits entirety.</p>\n\n<p>Available settings:</p>\n\n<ul><li>  A list of disabled languages can be set using\n\u201cdisabled_languages\u201d. Ex.\n<code>\"disabled_languages\": ['css']</code></li>\n<li>  Live autocomplete can be disabled by setting \u201clive\u201d to\nfalse.</li>\n<li>  Information for more settings is available in the\n<code>SublimeCodeIntel.sublime-settings</code> file in the package.</li>\n</ul><h2>Troubleshooting</h2>\n\n<p>If you are having problems or SublimeCodeIntel seems\nslow/unresponsive/non-working, there are some things you should try:</p>\n\n<ol><li> Make sure the SublimeCodeIntel is not being treated as an ignored\npackage.</li>\n<li> Regenerate indexing database.</li>\n<li> Open a new issue.</li>\n</ol><h3>Ignored package?</h3>\n\n<p>To make sure Sublime Text didn't add SublimeCodeIntel to the list of\nignored packages (this happens some times when packages are being\ninstalled/upgraded):</p>\n\n<ul><li>  Select the <code>Preferences/Settings - Default</code> menu item</li>\n<li>  Find the <code>ignored_packages</code> setting and remove SublimeCodeIntel from\nthe list.</li>\n</ul><h3>Regenerate index</h3>\n\n<p>To force re-indexation of the code intelligence database you need to\nfollow these steps:</p>\n\n<ul><li>  Close Sublime Text</li>\n<li>  Open a terminal or navigate through your directories to find the\ndirectory <code>~/.codeintel</code> that contains <code>codeintel.log</code>, <code>VERSION</code>\nand the directory <code>db</code>. In Windows, this should be at\n<code>%userprofile%\\.codeintel</code>.</li>\n<li>  Delete the whole directory <code>~/.codeintel</code> and all of its content.\nParticularly, if you want to delete only the indexes, the code\nintelligence database indexes are located inside <code>~/.codeintel/db</code>.</li>\n<li>  Start Sublime Text</li>\n<li>  Try doing some code intelligence with the files in your project and\nenjoy a clean re-indexing! (Remember that the database is being\nregenerated with this procedure, so you'll see it takes some time to\nautocomplete the first few times, you'll have to wait a bit for\nthings to be fast again)</li>\n</ul><h3>Opening an issue</h3>\n\n<p>If the problems persists after trying the above solutions, open a new\nissue in <a href=\"https://github.com/SublimeCodeIntel/SublimeCodeIntel/issues/\">https://github.com/SublimeCodeIntel/SublimeCodeIntel/issues/</a></p>\n\n<p>When opening new issues, please check no other issues exist which report\nthe same problem and provide all the messages from the Sublime Text\nconsole (the console is accessed via the <code>ctrl+</code> shortcut or the\n<code>View &gt; Show Console</code> menu) and the <code>~/.codeintel/codeintel.log</code> file\n(<code>%userprofile%\\.codeintel\\codeintel.log</code> in Windows) as well as\nmentioning the Sublime Text version, the platform you are using and the\nlanguages you are using the code intelligence on.</p>\n\n<h2>What's New</h2>\n\n<p>v3.0.0 (unreleased, beta):</p>\n\n<ul><li>  Uses CodeIntel as an OOP command and package. Needs to install\nCodeIntel with pip: <code>pip install --upgrade --pre CodeIntel</code></li>\n</ul><p>v2.2.0 (2015-03-26):</p>\n\n<ul><li>  Fixed issue with tabs and autocomplete</li>\n</ul><h2>License</h2>\n\n<p>The plugin is based in code from the Open Komodo Editor and has a MPL license.</p>\n\n<p>Ported from Open Komodo by German M. Bravo (Kronuz).</p></div>", "installs": {"total": 1307422, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [175, 497, 667, 639, 629, 494, 374, 405, 526, 673, 663, 737, 617, 376, 431, 626, 294, 817, 697, 698, 487, 520, 637, 657, 662, 782, 686, 470, 525, 659, 771, 701, 714, 676, 468, 425, 655, 682, 613, 741, 819, 454, 524, 664, 797, 770], "platform": "Windows"}, {"totals": [35, 111, 177, 151, 159, 97, 100, 87, 130, 152, 182, 159, 158, 91, 100, 160, 75, 177, 202, 174, 98, 116, 143, 152, 164, 178, 148, 109, 117, 157, 171, 152, 180, 176, 99, 98, 170, 174, 168, 175, 219, 117, 125, 180, 180, 179], "platform": "OS X"}, {"totals": [29, 112, 111, 102, 80, 91, 78, 90, 109, 100, 110, 111, 122, 84, 80, 115, 61, 121, 139, 121, 88, 85, 106, 139, 127, 115, 127, 98, 74, 106, 133, 127, 122, 105, 66, 91, 131, 117, 126, 145, 122, 89, 95, 132, 136, 135], "platform": "Linux"}]}, "windows": 758959, "linux": 223397, "osx": 325066}, "removed": false, "first_seen": "2011-12-15T14:11:03Z", "description": "Full-featured code intelligence and smart autocomplete engine", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "2.2.0", "prerelease_version": "3.0.0-rc.1"}], "readme": "https://raw.githubusercontent.com/SublimeCodeIntel/SublimeCodeIntel/master/README.md", "labels": ["codeintel", "intellisense", "autocomplete", "code-intel", "intelli-sense", "auto-complete", "code navigation", "snippets"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T07:49:17Z", "buy": null, "installs_rank": 1295, "st_versions": [2, 3], "donate": null, "issues": "https://github.com/munro/SublimeGraphvizPreview/issues", "authors": ["munro"], "trending_rank": null, "homepage": "https://github.com/munro/SublimeGraphvizPreview", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/munro/SublimeGraphvizPreview"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "GraphvizPreview", "last_modified": "2014-04-15T20:49:33Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>GraphvizPreview\u2014SublimeText Plugin</h1>\n\n<p>Simply highlight a graphviz snippet in your file, and hit <code>super+shift+g</code> to view it.  You can also click in the the body of a snippet.  Easy!</p>\n\n<p><img src=\"/readmes/img/a40e2a0c087752631028f9a66b4d2fa60026c02b.gif\" alt=\"Example video of plugin\"></p>\n\n<h2>Install</h2>\n\n<p>Install the package <code>GraphvizPreview</code> through <a href=\"https://packagecontrol.io/packages/GraphvizPreview\">Package Control</a>.  Works with Sublime Text 2 and Sublime Text 3 Beta.</p>\n\n<h3>Install Dependencies</h3>\n\n<p>This package also requires <code>dot</code> to be installed.</p>\n\n<h4>MacOS</h4>\n\n<p>Install graphviz using <a href=\"http://brew.sh/\">Homebrew</a></p>\n<div class=\"highlight\"><pre>brew install graphviz\n</pre></div>\n\n<h2>Installation (Manual)</h2>\n\n<p>For windows: \n* Download and install GraphViz. \n* Add the GraphViz bin folder to the env PATH variable (C:\\Program Files (x86)\\Graphviz\\bin)</p>\n\n<p>Common: \n* Download the zip.\n* Rename resulting folder to <code>GraphvizPreview</code>.\n* Place the folder in your Sublime Text Packages folder.</p>\n\n<h2>Changelog</h2>\n\n<h3>Next release</h3>\n\n<ul><li>Add Windows &amp; Linux Support</li>\n<li>Configurable hot key</li>\n<li>Configurable <code>dot</code> binary location</li>\n</ul><h3>v0.1.1</h3>\n\n<ul><li>Added Sublime Text 3 Support</li>\n</ul><h3>v0.1.0</h3>\n\n<ul><li>Created preview plugin for Sublime Text 2 on Mac OS</li>\n</ul></div>", "installs": {"total": 5667, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [1, 3, 3, 0, 2, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1, 3, 0, 1, 1, 4, 1, 2, 2, 3, 1, 0, 1, 0, 1, 2, 6, 2, 7, 1, 5, 1, 0, 8, 6, 1, 0, 1, 1, 0, 3, 3], "platform": "Windows"}, {"totals": [0, 1, 2, 0, 1, 0, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 4, 0, 1, 0, 0, 3, 0, 0, 0, 0, 2, 3, 0], "platform": "OS X"}, {"totals": [0, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 1], "platform": "Linux"}]}, "windows": 2773, "linux": 936, "osx": 1958}, "removed": false, "first_seen": "2014-04-11T13:45:32Z", "description": "SublimeText Plugin to quickly view a Graphviz snippet", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "0.1.1", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/munro/SublimeGraphvizPreview/master/README.md", "labels": [], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T07:27:23Z", "buy": null, "installs_rank": 392, "st_versions": [3], "donate": null, "issues": "https://github.com/spywhere/Terminality/issues", "authors": ["spywhere"], "trending_rank": null, "homepage": "https://github.com/spywhere/Terminality", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/spywhere/Terminality"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "Terminality", "last_modified": "2015-06-02T20:21:13Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h2>Terminality</h2>\n\n<p>A Sublime Text 3 Plugin for Sublime Text's Internal Console</p>\n\n<table><thead><tr><th>Branch</th>\n<th><a href=\"https://gitter.im/spywhere/Terminality?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"/readmes/img/55d7baa2b87b297b8fc1aec61f3df1ba76ba0e45.svg\" alt=\"Gitter\"></a></th>\n<th><a href=\"https://github.com/spywhere/Terminality/releases\"><img src=\"/readmes/img/0eb909b032d697a4e4502e9c4386e2112463a1a9.svg\" alt=\"Release\"></a></th>\n</tr></thead><tbody><tr><td>release</td>\n<td><a href=\"https://travis-ci.org/spywhere/Terminality\"><img src=\"/readmes/img/a59bd80fef5a86a5c9062adac818e3491f53d35a.svg\" alt=\"Build Status\"></a></td>\n<td><a href=\"https://github.com/spywhere/Terminality/issues\"><img src=\"/readmes/img/b771c72f4b375f2464323845bf04bafbb0264b04.svg\" alt=\"Issues\"></a></td>\n</tr><tr><td>master (develop)</td>\n<td><a href=\"https://travis-ci.org/spywhere/Terminality\"><img src=\"/readmes/img/e1d784eb80cfbdd8f36e0864ce04115599f84cec.svg\" alt=\"Build Status\"></a></td>\n<td><a href=\"https://github.com/spywhere/Terminality/blob/master/LICENSE\"><img src=\"/readmes/img/15a7af760a2ed649fdfb826554cce59ed14c4097.svg\" alt=\"License\"></a></td>\n</tr></tbody></table><p><img src=\"/readmes/img/a9a140ae85382b4cdeab8066cbf4c7191f8a292e.gif\" alt=\"Plugin in Action\"></p>\n\n<h3>What is Terminality</h3>\n\n<p>Terminality is a plugin to allows Sublime Text to be used as Terminal. This included input and output from/to Sublime Text's buffer. Although Terminality can run many commands, it <strong>is not gurranteed</strong> that it can be used for all commands.</p>\n\n<p>The command is language-based. Current version support the following languages\u2026</p>\n\n<ul><li>C\n\n<ul><li>Compile and Run</li>\n</ul></li>\n<li>C++\n\n<ul><li>Compile and Run</li>\n</ul></li>\n<li>Lua\n\n<ul><li>Run</li>\n</ul></li>\n<li>Python\n\n<ul><li>Run as Python 2 (<code>python</code> command)</li>\n<li>Run as Python 3 (<code>python3</code> command)</li>\n</ul></li>\n<li>Rust (thanks to <a href=\"https://twitter.com/divinites\">@divinites</a>)\n\n<ul><li>Run</li>\n</ul></li>\n<li>Ruby\n\n<ul><li>Run</li>\n</ul></li>\n<li>Swift (OS X only)\n\n<ul><li>Run</li>\n</ul></li>\n</ul><p>Is that it? No, Terminality allows you to add your own commands to be used inside Sublime Text. Please see the section belows for more informations.</p>\n\n<h3>How to use it?</h3>\n\n<p>Just pressing <code>Ctrl+Key+R</code> and the menu will show up, let's you select which command to run.</p>\n\n<p>If you want to pass arguments to command (depends on how each command use the arguments), pressing <code>Ctrl+Key+Shift+R</code> instead. This will let's you select the command first, then ask you for arguments input.</p>\n\n<p><code>Key</code> is <code>Alt</code> in Windows, Linux, <code>Cmd</code> in OS X</p>\n\n<p><strong>Note!</strong> This key binding is conflicted with SFTP. You might have to override it yourself.</p>\n\n<h3>Settings</h3>\n\n<p>Terminality is using a very complex settings system in which you can control how settings affect the whole Sublime Text or each project you want.</p>\n\n<p>As you might already know, you can override default settings by set the desire settings inside user's settings file (can be access via <code>Preferences &gt; Packages Settings &gt; Terminality &gt; Settings - User</code>).</p>\n\n<p>But if you want to override the settings for particular project, you can add the <code>terminality</code> dictionary to the .sublime-project file. Under this dictionary, it works like a user's settings file but for that project instead.</p>\n\n<p>To summarize, Terminality will look for any settings in your project settings file first, then user's settings file, and finally, the default package settings.</p>\n\n<h3>How Terminality can helps my current workflow?</h3>\n\n<p>Good question! You might think Terminality is just a plugin that showing a list of commands which you already know how to use it. Sure, that what it is under the hood but Terminality does not stop there. Here are the list of somethings that Terminality can do for you\u2026</p>\n\n<ul><li>Run tests on your project</li>\n<li>Exclusively build and run your project without affecting another project</li>\n<li>Dynamically run Sublime Text's commands based on your project or current file</li>\n<li>One keystroke project deployment</li>\n<li>And much more\u2026</li>\n</ul><h3>How can I created my own command to be used with Terminality?</h3>\n\n<p>You can create your own command to be used with Terminality by override the commands in which using only <code>execution_units</code> key in the settings. </p>\n\n<p>Or if you want to create and share some of your Terminality commands, use the Collections (See Collections section belows).</p>\n\n<blockquote>\n<p>In v0.3.7 or earlier, you must set it in <code>additional_execution_units</code> instead.<br>\nIn v0.3.8 or later, <code>additional_execution_units</code> is deprecated and will be removed in v0.4.0</p>\n</blockquote>\n<div class=\"highlight\"><pre><span class=\"c1\">// Settings file</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// ... Your other settings ...</span>\n    <span class=\"s2\">\"execution_units\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// ... See Language Scopes section belows ...</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// ... Your other settings ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<h4>Language Scopes</h4>\n\n<p>Terminality use Sublime Text's syntax language scope in which you can look it up at the status bar when pressing <code>Ctrl+Alt+Shift+P</code> (Windows and Linux) and <code>Ctrl+Shift+P</code> (OSX).</p>\n\n<p>Language Scope section is a dictionary contains commands which will available for specified language scope.</p>\n\n<p>The key of the language scope is simply a scope name you want to specified. If you want the command to be available to all language just simply use the <code>*</code> as a language scope.</p>\n\n<p>You cannot override the default language scope. However, you can remove the default commands for that language scope by set the value to non-dictionary type (such as <code>0</code>).</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"&lt;Language Scope&gt;\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ... See Commands section belows ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<h4>Commands</h4>\n\n<p>Command section is a dictionary contains informations about how to run the command.</p>\n\n<p>The key of the command is simply a command name you want to use as a command reference (this will also be used as command name if you did not specified the <code>name</code> key).</p>\n\n<p>You can override the command by use the exactly same command reference name of the command you want to override (included default one). And you can also remove the commands by set the value to non-dictionary type (such as <code>0</code>).</p>\n\n<p>Each key is optional (exceptions in the Limitations/Rules section belows) and has the following meaning\u2026</p>\n\n<ul><li><code>name</code> [macros string] A name of the command (which showing in the menu).</li>\n<li><code>description</code> [macros string] A description of the command (which show as subtitle in the menu).</li>\n<li><code>order</code> [string] A string which used for sorting menus</li>\n<li><code>location</code> [macros string] A location path to run the command</li>\n<li><code>required</code> [list] A list of macro name (without $) that have to be set before run the command (if any of the macro is not set, command will not run).</li>\n<li><code>arguments</code> [string] A text to show when ask for arguments input.</li>\n<li><code>command</code> [macros string] A macros string define the command that will be run.</li>\n<li><code>window_command</code> [macros string] A macros string define the Sublime Text's window command (included any plugin you installed) that will be run.</li>\n<li><code>view_command</code> [macros string] A macros string define the Sublime Text's view command (command in which only run within a view) that will be run.</li>\n<li><code>args</code> [dict] A dictionary that will be passed to <code>window_command</code> or <code>view_command</code>. Each macro inside the dictionary's value will be parsed recursively.</li>\n<li><code>platforms</code> [list] A list of supported platforms. In <code>&lt;os&gt;-&lt;arch&gt;</code>, <code>&lt;os&gt;</code> or <code>&lt;arch&gt;</code> format (<code>os</code> and <code>arch</code> are from Sublime Text's <code>sublime.platform()</code> and <code>sublime.arch()</code> command).</li>\n<li><code>no_echo</code> [bool] Specify whether input will be echo (<code>false</code>) or not (<code>true</code>).</li>\n<li><code>read_only</code> [bool] Specify whether running view can receives input from user (<code>false</code>) or not (<code>true</code>).</li>\n<li><code>close_on_exit</code> [bool] Specify whether running view will be closed when command is terminated (<code>true</code>) or not (<code>false</code>).</li>\n<li><code>macros</code> [dict] A dictionary contains custom macro definitions. See Custom Macros section belows.</li>\n</ul><div class=\"highlight\"><pre><span class=\"s2\">\"&lt;Command Reference&gt;\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;Command Reference&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;Command Name&gt; command\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"order\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;Command Name&gt;\"</span>\n    <span class=\"s2\">\"location\"</span><span class=\"o\">:</span> <span class=\"s2\">\"$working\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"required\"</span><span class=\"o\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s2\">\"arguments\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Arguments\"</span><span class=\"p\">,</span>\n    <span class=\"c1\">// You can use only one of \"command\", \"window_command\" or \"view_command\"</span>\n    <span class=\"s2\">\"command\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;No default value&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"window_command\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;No default value&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"view_command\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;No default value&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"c1\">// \"args\" will only use with \"window_command\" and \"view_command\"</span>\n    <span class=\"s2\">\"args\"</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n    <span class=\"s2\">\"platforms\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"nx\">No</span> <span class=\"k\">default</span> <span class=\"nx\">value</span><span class=\"o\">&gt;</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"no_echo\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"read_only\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"close_on_exit\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"macros\"</span><span class=\"o\">:</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<h5>Limitations/Rules</h5>\n\n<ul><li>Every macro name (except inside <code>required</code>) should have <code>$</code> prefix.</li>\n<li>Each action must contains only one of <code>command</code>, <code>window_command</code> and <code>view_command</code> (other can be omitted)</li>\n<li><code>location</code>, <code>no_echo</code>, <code>read_only</code> and <code>close_on_exit</code> only works with <code>command</code> only</li>\n<li><code>args</code> only works with <code>window_command</code> or <code>view_command</code> only</li>\n</ul><p>See example inside Terminality's user settings file (and also in Terminality's .sublime-project file itself!).</p>\n\n<h3>Predefined Macros</h3>\n\n<ul><li><code>file</code>: Path to current working file<br><code>file_relative</code>: Relative path of <code>file</code></li>\n<li><code>file_name</code>: Name of <code>file</code></li>\n<li><code>working</code>: This will use <code>working_project</code> but if not found it will use <code>project</code> and if still not found it will use <code>parent</code><br><code>working_relative</code>: Relative path of <code>working</code></li>\n<li><code>working_name</code>: Name of <code>working</code></li>\n<li><code>working_project</code>: Project folder contains current working file<br><code>working_project_relative</code>: Relative path of <code>working_project</code></li>\n<li><code>working_project_name</code>: Name of <code>working_project</code></li>\n<li><code>project</code>: First project folder<br><code>project_relative</code>: Relative path of <code>project</code></li>\n<li><code>project_name</code>: Name of <code>project</code></li>\n<li><code>parent</code>: Parent folder contains current working file<br><code>parent_relative</code>: Relative path of <code>parent</code></li>\n<li><code>parent_name</code>: Name of <code>parent</code></li>\n<li><code>packages_path</code>: Path to Sublime Text's packages folder</li>\n<li><code>raw_selection</code>: Raw text of last selection</li>\n<li><code>selection</code>: Striped text of last selection</li>\n<li><code>arguments</code>: A text which passed via arguments input</li>\n<li><code>sep</code>: Path separator (<code>/</code> or <code>\\</code> depends on your operating system)</li>\n<li><code>$</code>: <code>$</code> symbol</li>\n</ul><h3>Custom Macros</h3>\n\n<p>You can create your own macro to be used with custom command by adding each macro to <code>macros</code> section in your execution unit (See Commands aboves). Each macro is a key-value pairs in which key indicated macro name (<code>a-zA-Z0-9_</code> without prefixed <code>$</code>) and value is a list of any combination of the following values\u2026</p>\n\n<ul><li><code>\"String and/or $macro\"</code> This will be a parsed string (which must not contains self-recursion) if previous value is not found</li>\n<li><code>[\"Start:End\"]</code> This will substring the previous value (if any) from <code>start</code> to <code>end</code></li>\n<li><code>[\"RegEx Pattern\", &lt;Optional Capture Group&gt;]</code> This will return a specified group (or default match if not specified) from previous value matching</li>\n<li><code>[\"String and/or $macro\", \"Start:End\"]</code> This will substring the specified string/macro from <code>start</code> to <code>end</code> if previous value is not found</li>\n<li><code>[\"String and/or $macro\", \"RegEx Pattern\", &lt;Optional Capture Group&gt;]</code> This will return a specified group (or default match if not specified) from specified string/macro matching if previous value is not found</li>\n</ul><p>Substring works just like Python's substring. You can omitted <code>start</code> or <code>end</code> as you like.</p>\n\n<p>Macro works as a sequence, if current macro is not found it will look at the next macro.</p>\n\n<p>Example:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"CustomMacro\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"$file_name\"</span><span class=\"p\">,</span> <span class=\"c1\">// Get the file name from predefined macro</span>\n    <span class=\"p\">[</span><span class=\"s2\">\":-4\"</span><span class=\"p\">],</span> <span class=\"c1\">// Remove the last 4 characters (if value is found)</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"$file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\\\\w+\"</span><span class=\"p\">],</span> <span class=\"c1\">// Get the result from parsing \"$file\" with RegEx if previous value is not found</span>\n    <span class=\"s2\">\"\"</span> <span class=\"c1\">// If nothing can be used, use empty string</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<h3>Collections</h3>\n\n<blockquote>\n<p><em>Implemented in v0.3.8 and later</em></p>\n</blockquote>\n\n<p>Collections is a package contains Terminality commands which can be install by place in the <code>User</code> directory.</p>\n\n<p>The structure of Collections file is simply a JSON file with .terminality-collections extension. Inside the file contains the following format\u2026</p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"execution_units\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// ... See Language Scopes section aboves ...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>Please note that Collections is not a settings file (although it contains the same key name). Any other key will be ignored completely.</p>\n\n<h3>Contributors</h3>\n\n<ul><li><a href=\"https://twitter.com/utensil\">@utensil</a></li>\n<li><a href=\"https://twitter.com/zmLGBBM\">@zmLGBBM</a></li>\n<li><a href=\"https://twitter.com/divinites\">@divinites</a></li>\n</ul></div>", "installs": {"total": 33800, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [5, 20, 15, 16, 23, 18, 17, 20, 14, 21, 19, 21, 16, 11, 12, 19, 13, 24, 24, 21, 14, 10, 21, 38, 23, 14, 26, 18, 15, 24, 29, 28, 20, 29, 14, 12, 28, 26, 38, 22, 25, 21, 29, 27, 24, 40], "platform": "Windows"}, {"totals": [1, 14, 14, 14, 9, 8, 7, 10, 6, 11, 8, 15, 8, 5, 10, 5, 4, 11, 19, 9, 4, 5, 5, 15, 15, 17, 5, 6, 8, 8, 11, 5, 19, 12, 6, 9, 10, 9, 19, 11, 13, 4, 11, 15, 17, 11], "platform": "OS X"}, {"totals": [7, 5, 11, 9, 13, 9, 3, 3, 10, 8, 12, 7, 6, 6, 10, 13, 12, 13, 12, 11, 10, 9, 5, 14, 8, 8, 7, 7, 3, 14, 9, 9, 10, 14, 12, 9, 9, 12, 9, 12, 17, 10, 14, 12, 11, 10], "platform": "Linux"}]}, "windows": 14453, "linux": 9241, "osx": 10106}, "removed": false, "first_seen": "2015-01-11T22:47:39Z", "description": "A Sublime Text 3 Plugin for Sublime Text's Internal Console", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [3], "version": "0.3.10", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/spywhere/Terminality/master/README.md", "labels": ["console", "repl", "terminal", "utilities", "utils"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T07:27:28Z", "buy": null, "installs_rank": 466, "st_versions": [3], "donate": null, "issues": "https://github.com/Wramberg/TerminalView/issues", "authors": ["Wramberg"], "trending_rank": null, "homepage": "https://github.com/Wramberg/TerminalView", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/Wramberg/TerminalView"], "is_missing": false, "platforms_display": ["OS X", "Linux"], "name": "TerminalView", "last_modified": "2017-08-15T18:37:00Z", "platforms": ["osx", "linux"], "readme_html": "<div><h1>TerminalView</h1>\n\n<p><a href=\"https://travis-ci.org/Wramberg/TerminalView\"><img src=\"/readmes/img/0b7bed8eb97911a88ed197d8c0d3b21d161eea59.svg\" alt=\"Build Status\"></a></p>\n\n<p>A Linux/macOS plugin for Sublime Text 3 that allows for terminals inside editor views.</p>\n\n<p><img src=\"/readmes/img/72bb5d6de5b36519d424ede1e7a49f4cf3a3f469.gif\" alt=\"example.gif\" title=\"TerminalView Demonstration\"></p>\n\n<p>The plugin uses a pseudo-terminal to start the underlying shell which means it supports</p>\n\n<ul><li>Interactive applications (less, man, ipython, ssh, etc.)</li>\n<li>Auto-completion</li>\n<li>Terminal shortcuts (<code>ctrl</code>+<code>c</code>, etc.)</li>\n<li>Basically everything you would expect from a terminal</li>\n</ul><p>In addition it also supports</p>\n\n<ul><li>Integration with the Sublime Text build system</li>\n<li>Shell colors (8 color support for now - development for 256 is planned)</li>\n<li>Scrollback history</li>\n<li>Copy/Pasting</li>\n<li>Static syntax highlighting (as an addition to shell colors)</li>\n<li>Integration with other plugins</li>\n</ul><p><strong>Note, if you encounter any issues please check the \u201cCommon problems\u201d section at the bottom for a solution.</strong></p>\n\n<h2>Dependencies</h2>\n\n<p>To run this plugin you need</p>\n\n<ul><li>Linux-based OS</li>\n<li>Sublime Text 3 (build 3092 or newer)</li>\n<li>bash (this is not required but recommended, see \u201cChanging shell\u201d below for details)</li>\n</ul><h2>Installation</h2>\n\n<p>To install from <a href=\"https://packagecontrol.io/packages/TerminalView\">https://packagecontrol.io/packages/TerminalView</a></p>\n\n<ol><li>Open the command palette (<code>ctrl</code>+<code>shift</code>+<code>p</code> by default) and find \u201cPackage Control: Install Package\u201d</li>\n<li>Search for TerminalView and hit <code>enter</code> to install.</li>\n</ol><p>To install manually from github run</p>\n<div class=\"highlight\"><pre>git clone https://github.com/Wramberg/TerminalView.git $HOME/.config/sublime-text-3/Packages/TerminalView\n</pre></div>\n\n<h2>Usage</h2>\n\n<p>Simply bring up your command palette (<code>ctrl</code>+<code>shift</code>+<code>p</code> by default) and search for \u201cTerminal View: Open Bash\u201d. This opens a terminal using 'bash -l' as shell. By default there is no keybinding for opening a terminal view but you can bind a key in your keymap to the <em>terminal_view_open</em> command:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"ctrl+alt+t\"], \"command\": \"terminal_view_open\" },\n</pre></div>\n\n<p>which does the same. All configuration for TerminalView is available through the command palette by searching for \u201cTerminal View\u201d. Alternatively, it can also be accessed through the menu: <em>Preferences-&gt;Package Settings-&gt;TerminalView</em>. The configuration includes</p>\n\n<ul><li>Keybindings</li>\n<li>Settings</li>\n<li>Palette commands</li>\n<li>Color scheme</li>\n</ul><p>These are all discussed further in the remainder of this readme.</p>\n\n<h2>Keybindings</h2>\n\n<p>The following keys are forwarded to the shell by default:</p>\n\n<ul><li>All single characters and numbers</li>\n<li>All signs (create an issue if some are missing)</li>\n<li>Arrow keys</li>\n<li><code>home</code>, <code>end</code>, <code>delete</code>, <code>insert</code>, <code>pageup</code>, <code>pagedown</code></li>\n<li><code>escape</code>, <code>tab</code>, <code>space</code>, <code>backspace</code>, <code>enter</code></li>\n<li>Any <code>ctrl</code>+<code>&lt;char&gt;</code> combination except <code>ctrl</code>+<code>k</code> (see below if you want this to go to the shell instead of ST3)</li>\n<li>Any <code>alt</code>+<code>&lt;char&gt;</code> combination</li>\n<li>Any <code>ctrl</code>+<code>&lt;arrow key&gt;</code> combination</li>\n</ul><p>Note that <code>ctrl</code>+<code>&lt;sign&gt;</code> combinations are not forwarded as they depend on keyboard layout. The keybindings can be configured through the menu or the command palette.</p>\n\n<p><strong>If some of the keybindings are not working they are probably shadowed by keybindings in your user keymap.</strong> To fix this find the missing keybindings in the default keymap and copy them into your user keymap. For example, if you have bound <code>alt</code>+<code>f</code> in your user keymap you need to insert the following in your user keymap:</p>\n<div class=\"highlight\"><pre>{\"keys\": [\"alt+f\"], \"command\": \"terminal_view_keypress\", \"args\": {\"key\": \"f\", \"alt\": true}, \"context\": [{\"key\": \"setting.terminal_view\"}]},\n</pre></div>\n\n<p>Similarly, if you want to override some of the default TerminalView keybindings like e.g. <code>ctrl</code>+<code>w</code> move the following into your user keymap</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"ctrl+w\"], \"command\": \"close\" },\n</pre></div>\n\n<p>Lastly TerminalView also includes a few utility keybindings:</p>\n\n<table><thead><tr><th>Shortcut</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>ctrl</code> + <code>shift</code> + <code>c</code></td>\n<td>Copy the selection/line in the terminal into the clipboard</td>\n</tr><tr><td><code>ctrl</code> + <code>shift</code> + <code>v</code></td>\n<td>Paste the contents of the clipboard into the terminal</td>\n</tr><tr><td><code>alt</code> + <code>mouse wheel up</code> / <code>mouse wheel down</code></td>\n<td>Scroll back/forward in terminal history (only works on Linux - see <a href=\"https://github.com/Wramberg/TerminalView/blob/master/../../issues/28\">#28</a> for details)</td>\n</tr><tr><td><code>shift</code> + <code>pageup</code> / <code>pagedown</code></td>\n<td>Scroll back/forward in terminal history</td>\n</tr><tr><td><code>ctrl</code> + <code>shift</code> + <code>t</code> / <code>n</code></td>\n<td>Open a new file</td>\n</tr><tr><td><code>ctrl</code> + <code>shift</code> + <code>w</code> / <code>q</code></td>\n<td>Close the terminal view</td>\n</tr><tr><td><code>ctrl</code> + <code>shift</code> + <code>up</code> / <code>down</code> / <code>left</code> / <code>right</code></td>\n<td>Move the ST3 cursor (not the terminal cursor)</td>\n</tr><tr><td><code>ctrl</code> + <code>shift</code> + <code>home</code> / <code>end</code></td>\n<td>Move the ST3 cursor to beginning/end of line</td>\n</tr><tr><td><code>escape</code></td>\n<td>If ST3 cursor is located elsewhere than the terminal cursor move it back - otherwise send escape to shell.</td>\n</tr></tbody></table><p>Note that standard ST3 keybindings for selection are <strong>not</strong> shadowed which mean you can use <code>shift</code> + <code>keys</code> for selection in the terminal in case you prefer to use the keyboard. These keybindings do not move the actual terminal cursor however so whenever the terminal is updated the cursor will snap back to its point of origin.</p>\n\n<h2>Settings</h2>\n\n<p>The settings are available in the menu or through the command palette. The settings include options for adjusting colors, scrollback history and margins (to avoid scrollbars). Simply copy the settings you want to change into your user settings.</p>\n\n<h2>Changing shell</h2>\n\n<p>If you want to use another shell it is highly recommended to do this through bash with the -c command line argument. You can control the shell command through the <em>cmd</em> argument to the <em>terminal_view_open</em> command. In addition, you can also alter the title of the terminal view to reflect which shell is running.</p>\n\n<p>If you e.g. want to run an IPython shell when hitting <code>ctrl</code>+<code>alt</code>+<code>t</code>, add the following to your keymap file:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"ctrl+alt+t\"], \"command\": \"terminal_view_open\", \"args\": {\"cmd\": \"/bin/bash -l -c /usr/bin/ipython\", \"title\": \"Terminal (IPython)\"}},\n</pre></div>\n\n<p>If you really want to avoid using bash you can also run your shell directly:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"ctrl+alt+t\"], \"command\": \"terminal_view_open\", \"args\": {\"cmd\": \"/usr/bin/ipython\", \"title\": \"Terminal (IPython)\"}},\n</pre></div>\n\n<p>but this is <strong>experimental</strong>. Some future development regarding this is planned, but at the moment only bash is tested.</p>\n\n<p>When you are done you can close the terminal by closing the view (<code>ctrl</code>+<code>shift</code>+<code>q</code> or <code>ctrl</code>+<code>shift</code>+<code>w</code> as default) or exiting the shell (by e.g. hitting <code>ctrl</code>+<code>d</code>).</p>\n\n<h2>Palette Commands</h2>\n\n<p>Additional palette commands can be added through the menu or the command palette. These are simply included as an alternative to keybindings.</p>\n\n<h2>Color scheme</h2>\n\n<p>The color scheme is used for both dynamic coloring (colors set by the shell) and static coloring (colors set by syntax highlighting). The color scheme itself can be tweaked by copying the default color scheme into the user color scheme file. Both of these files are available in the menu or through the command palette.</p>\n\n<h2>Syntax highlighting</h2>\n\n<p>The plugin supports user provided syntax highlighting for static coloring. To use this feature create a <em>&lt;name&gt;.sublime-syntax</em> file in your <em>Packages/User</em> folder. The <em>packages</em> folder can accessed through the menu: <em>Preferences-&gt;Browse Packages</em>. The content of the file depends entirely on your needs - see <a href=\"https://www.sublimetext.com/docs/3/syntax.html\">https://www.sublimetext.com/docs/3/syntax.html</a> for details. As an example consider the following which highlights the prompt in bash.</p>\n<div class=\"highlight\"><pre>%YAML 1.2\n---\nname: TerminalViewBash\nhidden: true\nfile_extensions:\n  - terminal_view\nscope: text.terminal_view\ncontexts:\n  main:\n    - match: '\\w+@[A-z,\\-_]+(?=:)'\n      scope: terminalview.black_green\n    - match: '([A-z,\\-_/~0-9.]+\\$)'\n      scope: terminalview.black_blue\n</pre></div>\n\n<p>The matching could be improved upon but it will do for the purpose of this example. Note that the scope names are chosen so they match with scopes that are already defined in the color scheme. To change the color scheme see the \u201ccolor scheme\u201d section above. In this example the syntax file was saved as <em>bash.sublime-syntax</em> under the <em>Packages/User</em> folder. To use it when opening a bash terminal pass it to the <em>terminal_view_open</em> command with the <em>syntax</em> argument:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"ctrl+alt+t\"], \"command\": \"terminal_view_open\", \"args\": {\"cmd\": \"/bin/bash -l\", \"title\": \"Bash Terminal\", \"syntax\": \"bash.sublime-syntax\"}},\n</pre></div>\n\n<p>There are currently no syntax-files provided with the plugin so users must create their own. Note that any colors set by shell (except the black/white default) override colors set by the syntax highlighting.</p>\n\n<h2>Project switching and ST3 startup</h2>\n\n<p>When switching projects or (re)starting ST3 the plugin restarts all terminals views. Unfortunately, there is no obvious way of restoring earlier sessions so the views are completely reset.</p>\n\n<h2>Integrating with Sublime Text build system</h2>\n\n<p>In a Sublime Text build system, you can use the <code>terminal_view_exec</code> command as a <code>\"target\"</code> key. This allows you to parse input to the command you are running which is not possible in the standard build system.</p>\n\n<p>For example, consider this <code>.sublime-project</code>:</p>\n<div class=\"highlight\"><pre>{\n  \"build_systems\":\n  [\n    {\n      \"name\": \"My Build\",\n      \"shell_cmd\": \"c++ program.c -o program\",\n      \"working_dir\" \"$project_path\"\n      \"variants\":\n      [\n        {\n          \"name\": \"Run program\",\n          \"shell_cmd\": \"./program\",\n          \"working_dir\": \"$project_path\"\n        }\n      ]\n    }\n  ],\n  // Irrelevant code omitted\n}\n</pre></div>\n\n<p>When you click on <em>Tools</em> -&gt; <em>Build With\u2026</em> in the menu, you may select the <em>My Build - Run program</em> variant. This opens an output panel and runs your program. Unfortunately, if the program requires input from the user it cannot be provided. To solve this you can change the variant to:</p>\n<div class=\"highlight\"><pre>{\n  \"name\": \"Run program\",\n  \"target\": \"terminal_view_exec\",\n  \"shell_cmd\": \"./program\",\n  \"working_dir\": \"$project_path\"\n}\n</pre></div>\n\n<p>This runs your program inside a TerminalView instead where you can interact with it.</p>\n\n<h2>Integration with other plugins</h2>\n\n<p>TerminalView supports integration with other plugins through the <em>terminal_view_send_string</em> and <em>terminal_view_exec</em> commands. The former can be used to send a string to a running terminal while the latter opens a new terminal. For example, to run 'ls' in a terminal that is already open run</p>\n<div class=\"highlight\"><pre>window.run_command(\"terminal_view_send_string\", {\"string\": \"ls\\n\"})\n</pre></div>\n\n<p>To run a command in a new terminal run</p>\n<div class=\"highlight\"><pre>window.run_command(\"terminal_view_exec\", {\"cmd\": \"a.out\"})\n</pre></div>\n\n<p>For details refer to the source code for now.</p>\n\n<h2>List of plugins that integrate with TerminalView</h2>\n\n<p>The following is a list of known plugins that integrate with TerminalView.</p>\n\n<ul><li>SendCode by randy3k (<a href=\"https://github.com/randy3k/SendCode\">https://github.com/randy3k/SendCode</a>)</li>\n<li>ShellVE by bfelder (<a href=\"https://github.com/bfelder/ShellVE\">https://github.com/bfelder/ShellVE</a>)</li>\n</ul><h2>Common problems</h2>\n\n<p>List of common problems you may encounter when using this plugin.</p>\n\n<h4>A keybinding is not working even though it is listed in the keybindings section</h4>\n\n<p>This is most likely because you have the key bound to something else in your user keymap file. To make it work find the missing keybinding in the TerminalView keymap and copy it to your user keymap. For details see the keybindings section above.</p>\n\n<h4>The terminal is responsive but acts weird (prints weird sequences, cursor located in the wrong place, etc.)</h4>\n\n<p>Ensure you do not have a bash_profile file or similar that changes the value of the <code>TERM</code> environment variable. This is set to \u201clinux\u201d by the plugin and must stay that way. You can check it by calling <code>env | grep TERM</code> inside the terminal view in ST3. If the <code>TERM</code> value is correct feel free to open an issue for further investigation.</p>\n\n<h4>The terminal is sluggish and/or uses a lot of memory</h4>\n\n<p>You may have other plugins that conflict with TerminalView. TerminalView does a lot of modifications to the buffer which can conflict with plugins like e.g. GotoLastEditEnhanced. In this particular case a history of all modifications are saved causing unbound memory usage. Please test TerminalView in isolation to see if the issue persists.</p>\n\n<h2>Acknowledgments</h2>\n\n<p>The pyte terminal emulator (<a href=\"https://github.com/selectel/pyte\">https://github.com/selectel/pyte</a>) is an integral part of this plugin and deserves some credit for making this plugin possible.</p>\n\n<p>During development the SublimePTY plugin (<a href=\"https://github.com/wuub/SublimePTY\">https://github.com/wuub/SublimePTY</a>) was a good source of inspiration for some of the problems that occurred. You can probably find a few bits and pieces from it in this plugin.</p>\n\n<p>For testing stubs and general test structure the Javatar plugin (<a href=\"https://github.com/spywhere/Javatar\">https://github.com/spywhere/Javatar</a>) was a good point of origin.</p></div>", "installs": {"total": 26790, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], "platform": "Windows"}, {"totals": [8, 65, 59, 69, 55, 58, 18, 34, 45, 50, 90, 60, 67, 36, 25, 44, 24, 63, 72, 58, 34, 29, 48, 80, 64, 58, 59, 36, 37, 67, 75, 88, 110, 95, 46, 65, 106, 114, 99, 131, 175, 77, 141, 202, 83, 44], "platform": "OS X"}, {"totals": [17, 35, 36, 46, 57, 66, 29, 34, 50, 52, 58, 53, 50, 22, 46, 46, 33, 51, 51, 46, 31, 34, 46, 52, 46, 48, 36, 29, 35, 62, 58, 69, 74, 61, 47, 47, 52, 72, 70, 78, 107, 60, 70, 80, 56, 53], "platform": "Linux"}]}, "windows": 41, "linux": 11857, "osx": 14892}, "removed": false, "first_seen": "2017-06-10T11:55:55Z", "description": "Terminal inside Sublime Text 3 view", "z_value": null, "versions": [{"platforms": ["osx", "linux"], "st_versions": [2, 3], "version": "0.5.0", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/Wramberg/TerminalView/master/README.md", "labels": ["terminal", "console", "shell", "bash"], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T07:27:30Z", "buy": null, "installs_rank": 495, "st_versions": [2, 3], "donate": null, "issues": "https://github.com/afterdesign/termX/issues", "authors": ["afterdesign"], "trending_rank": null, "homepage": "http://malinowski.be/termX", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/afterdesign/termX"], "is_missing": false, "platforms_display": ["OS X"], "name": "termX", "last_modified": "2018-04-18T17:13:05Z", "platforms": ["osx"], "readme_html": "<div><h1>Sublime Text terminal plugin for macs</h1>\n\n<ol><li>Fully packaged</li>\n<li>Currently with option to open new tab</li>\n<li>Sublime Text 2 and 3</li>\n</ol><h1>Installation</h1>\n\n<h3>From git:</h3>\n<div class=\"highlight\"><pre>cd $PATH_OF_SUBLIME_PACKAGES\ngit clone git://github.com/afterdesign/termX.git\n</pre></div>\n\n<h3>From <a href=\"http://wbond.net/sublime_packages/package_control\">package control</a></h3>\n\n<p>Just type termX</p>\n\n<h1>Keybinding</h1>\n\n<p>Default keybinding is:</p>\n<div class=\"highlight\"><pre>ctrl+cmd+t\n</pre></div>\n\n<p>To change it go to:</p>\n<div class=\"highlight\"><pre>Sublime Text 2 -&gt; Preferences -&gt; Package Settings -&gt; termX -&gt; Key Bindings\n</pre></div>\n\n<p>And set something similar to:</p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span> <span class=\"nt\">\"keys\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"ctrl+super+t\"</span><span class=\"p\">],</span> <span class=\"nt\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"open_termx_terminal\"</span> <span class=\"p\">}</span>\n</pre></div>\n\n<h1>Alternative terminals:</h1>\n\n<p>By default this plugin is using native <code>Terminal.app</code>.\nYou can also use <a href=\"http://iterm2.com\">iTerm2</a> and (thanks to awesome <a href=\"https://github.com/JohnBehnke\">@JohnBehnke</a>) <a href=\"http://hyper.is\">Hyper</a>.</p>\n\n<p>To change settings edit:</p>\n<div class=\"highlight\"><pre>Sublime Text 2 -&gt; Preferences -&gt; Package Settings -&gt; termX -&gt; Settings - User\n</pre></div>\n\n<p>And change terminal setting to <code>iterm</code> (default is <code>terminal</code>):</p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"terminal\"</span>   <span class=\"p\">:</span>  <span class=\"s2\">\"terminal/iterm/hyper\"</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<h1>Terminal opening strategy</h1>\n\n<p>By default termX is opening terminal with path to directory where currently edited file is placed.</p>\n\n<p>You can change this behavious by editing settings file:</p>\n<div class=\"highlight\"><pre>Sublime Text 2 -&gt; Preferences -&gt; Package Settings -&gt; termX -&gt; Settings - User\n</pre></div>\n\n<p>Default option is <code>file</code> and you can change it to <code>project</code>:</p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"directory_mode\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"file/project\"</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<h1>FAQ</h1>\n\n<ol><li><p>The \u201cOpen in terminal\u201d is greyed out.\nThis happens when there is no opened file and for now I don't know if\nthis is just a sublime bug or I need to change something.\n    For now I saw the same behavior in</p></li>\n<li><p>How do I change path to <code>osascript</code> ?</p>\n\n<p>To check what is path for <code>osascript</code> just open terminal and type:</p>\n<div class=\"highlight\"><pre>which osascript\n</pre></div>\n\n<p>With path simply go to:</p>\n<div class=\"highlight\"><pre>Sublime Text 2 -&gt; Preferences -&gt; Package Settings -&gt; termX -&gt; Settings - User\n</pre></div>\n\n<p>and add:</p>\n<div class=\"highlight\"><pre>{\n    \"osascript\"   :  \"/usr/bin/osascript\"\n}\n</pre></div></li>\n<li><p>Can I always open main directory of project ?</p>\n\n<p>From version 2.0 you can.</p>\n\n<p>Open:\n\u201c\nSublime Text 2 -&gt; Preferences -&gt; Package Settings -&gt; termX -&gt; Settings - User</p>\n<div class=\"highlight\"><pre>And set :\n</pre></div>\n\n<p>{\n    \"directory_mode\u201d : \u201cproject\u201d\n}</p>\n<div class=\"highlight\"><pre>From now on if you have only 1 directory added to project it's going to be opened by default.\nIf you have more than 1 directory in your project you'll see quickpanel to select what you would like to open.\n\n![](https://raw.github.com/afterdesign/termX/master/messages/termx_2.gif)\n\nThanks [<a href=\"https://twitter.com/dirajkumar\">@dirajkumar</a>](https://github.com/dirajkumar) for the idea !\n</pre></div></li>\n<li><p>Its not working for me.</p>\n\n<p>First of all enable <code>debug</code> mode. To do this open your settings and add:\n<code>\"debug\": true</code></p>\n\n<p>After this try to open terminal again. If it's not working (and debug shouldn't repair the problem)\nopen sublime console (default shortcut is <code>ctrl+`</code>) and open new issue with log\nbetween <code>---termX Debug Start---</code> and <code>---termX Debug End---</code>.</p>\n\n<p>You can always ping me on <a href=\"http://twitter.com/afterdeign\">twitter</a> or\nsimply write <a href=\"https://github.com/afterdesign/termX/issues\">issue on github</a>.</p></li>\n</ol><h1>Contact</h1>\n\n<p>All info about me you can find on my \u201cgoto page\u201d: <a href=\"https://malinowski.be\">http://malinowski.be</a> or just ping me on twitter: <a href=\"http://twitter.com/afterdesign\">@afterdesign</a></p>\n\n<h1>License</h1>\n\n<p>Licensed under the <a href=\"http://opensource.org/licenses/MIT\">MIT license</a>.</p></div>", "installs": {"total": 24363, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "platform": "Windows"}, {"totals": [0, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 0, 1, 2, 0, 3, 4, 3, 2, 3, 0, 1, 3, 1, 1, 0, 1, 6, 1, 3, 3, 2, 2, 2, 2, 3, 2, 1, 3, 4, 2, 1, 3, 4], "platform": "OS X"}, {"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "platform": "Linux"}]}, "windows": 17, "linux": 5, "osx": 24341}, "removed": false, "first_seen": "2012-11-08T18:52:25Z", "description": "MacTerminal is a SublimeText plugin. It opens new Terminal tab (on current or new window if necessary). It's working with Terminal and iTerm.", "z_value": null, "versions": [{"platforms": ["osx", "osx-x64"], "st_versions": [2, 3], "version": "6.1.0", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/afterdesign/termX/master/README.md", "labels": ["terminal"], "missing_error": "", "previous_names": ["MacTerminal"]}
{"last_seen": "2018-06-23T07:31:10Z", "buy": null, "installs_rank": 2830, "st_versions": [2, 3], "donate": null, "issues": "https://github.com/math2001/BetterSnippetManager/issues", "authors": ["math2001"], "trending_rank": null, "homepage": "https://github.com/math2001/BetterSnippetManager", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/math2001/BetterSnippetManager"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "BetterSnippetManager", "last_modified": "2017-02-24T23:08:53Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>Better Snippet Manager</h1>\n\n<p>You can list all your snippets (even in infinite sub-folders, they're listed in one panel, for quick access)\nYou can create some snippet interactively.</p>\n\n<p>The two commands are available in the command palette.</p>\n\n<h2>Usage</h2>\n\n<h3>Create new snippets</h3>\n\n<p>You can create a new snippet by selecting up in the command palette <code>BetterSnippetManager: Create New Snippet</code>.</p>\n\n<p>It's going to ask you different <em>snippet specific</em> questions: the <code>trigger</code>, the <code>description</code>, the <code>scope</code>.</p>\n\n<p>If you're not aware of any of them, I strongly recommend having a look at <a href=\"http://docs.sublimetext.info/en/latest/extensibility/snippets.html\">the community powered unofficial documentation</a></p>\n\n<p>In addition, it's also going to ask you the <code>folder</code> to save this snippet in, and the <code>file name</code> of you snippet.</p>\n\n<p>The folder name is defined with the scope you're currently in. So, if you're writing <code>JSON</code>, it's going to propose you to save this in a <code>json</code> folder (because the scope is <code>source.json</code>). You can of course change this (note that if you put nothing in, it's going to put it at the root of your folder (in this case <code>User</code>)).</p>\n\n<p>The <code>filename</code> has to have the extension <code>.sublime-snippet</code> to be taken into account by Sublime Text. So, it's added by default. The name alone is defined by the trigger you chose earlier in the process, but you can change this as well.</p>\n\n<p>Once this is done, it'll create the snippet file, and open it in Sublime Text for you.</p>\n\n<p><img src=\"/readmes/img/a19ef8155d8bb39c88b0836236dc5cdabe9083aa.gif\" alt=\"demo creating Sublime Text snippets using BetterSnippetManager\"></p>\n\n<p><em>The content of the snippet is the content of your selection when you created ran <code>BetterSnippetManager: Create New Snippet</code> (it can be empty, it's just a little trick)</em></p>\n\n<h3>Edit existing snippets</h3>\n\n<p>You can edit existing snippets by searching up in the command palette: <code>BetterSnippetManager: Edit Snippets</code>. It'll list all your snippets (event the ones that are in sub-folders). It'll open the hovered one in the background. Now, you just need to hit <kbd>enter</kbd> to open it up.</p>\n\n<p><img src=\"/readmes/img/1c10b09196461e413fd18ac0c94b0f15407ec237.gif\" alt=\"demo listing Sublime Text snippets using BetterSnippetManager\"></p>\n\n<h2>All your snippets in one folder</h2>\n\n<p>If you're used to putting all your snippets inside a folder, you can configure BetterSnippetManager take this into consideration when listing and creating your snippets.</p>\n\n<p>You need to edit <em>BetterSnippetManager</em>'s settings (not your global ones). To do so, you can search up in the command palette <code>Preferences: BetterSnippetManager Settings</code>, or use the menus <code>Preferences \u2192 Packages Settings \u2192 BetterSnippetManager</code>.</p>\n\n<p>In the <em>right</em> file, you can add this:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"snippets_folder\"</span><span class=\"err\">:</span> <span class=\"s2\">\"my_snippet_folder\"</span>\n</pre></div>\n\n<p>and, like this, BetterSnippetManager will go straight into this folder (so don't list the snippet outside of it, which shouldn't be a problem).</p>\n\n<h2><a href=\"https://packagecontrol.io/packages/SaneSnippets\">SaneSnippet</a> is supported!</h2>\n\n<p>The commands stay <em>exactly</em> the same, all you have to do is set this plugin setting <code>use_sane_snippet</code> to <code>true</code>!</p>\n\n<p><em>Note: of course, you have to install <a href=\"https://packagecontrol.io/packages/SaneSnippets\">SaneSnippet</a></em></p>\n\n<p>Here's what a Sane Snippet looks like:</p>\n<div class=\"highlight\"><pre>---\ndescription: nice print for debug\ntabTrigger:  print\nscope:       source.python\n---\nprint(\"$TM_FILENAME:$TM_LINE_NUMBER\", $1)\n</pre></div>\n\n<p>Awesome, right?</p>\n\n<h2>Installation</h2>\n\n<h3>Using package control</h3>\n\n<ol><li>Open up the command palette: <kbd>ctrl+shift+p</kbd></li>\n<li>Search for <code>Package Control: Install Package</code></li>\n<li>Search for <code>BetterSnippetManager</code></li>\n<li>Hit <kbd>enter</kbd> :wink:</li>\n</ol><h3>Using the command line</h3>\n<div class=\"highlight\"><pre><span class=\"nb\">cd</span> <span class=\"s2\">\"%APPDATA%\\Sublime Text 3\\Packages\"</span>             <span class=\"c\"># on window</span>\n<span class=\"nb\">cd</span> ~/Library/Application<span class=\"se\">\\ </span>Support/Sublime<span class=\"se\">\\ </span>Text<span class=\"se\">\\ </span>3 <span class=\"c\"># on mac</span>\n<span class=\"nb\">cd</span> ~/.config/sublime-text-3                        <span class=\"c\"># on linux</span>\n\ngit clone <span class=\"s2\">\"https://github.com/math2001/BetterSnippetManager\"</span>\n</pre></div>\n\n<blockquote>\n<p>Which solution do I choose?</p>\n</blockquote>\n\n<p>It depends on of your needs:</p>\n\n<ul><li>If you intend to just use BetterSnippetManager, then pick the first solution (Package Control), <strong>you'll get automatic update</strong>.</li>\n<li>On the opposite side, if you want to tweak it, or even contribute (:+1:), use the second solution. Note that, to get updates, you'll have to <code>git pull</code></li>\n</ul><h2>How to open the <a href=\"https://github.com/math2001/FileManager/blob/master/README.md\"><code>README</code></a></h2>\n\n<p>To open their README, some of the packages add a command in the menus, others in the command palette, or other nowhere. None of those options are really good, especially the last one on ST3 because the packages are compressed. But, fortunately, there is a plugin that exists and will <strong>solve this problem for us</strong> (and he has a really cute name, don't you think?): <a href=\"https://packagecontrol.io/packages/ReadmePlease\">ReadmePlease</a>. :tada:</p>\n\n<h2>Note</h2>\n\n<p>In every screenshot, I was using the <a href=\"https://packagecontrol.io/packages/Boxy%20Theme\">Boxy Theme</a> (Monokai), with the corresponding color scheme. The font was <em>Droid Sans Mono</em>.</p></div>", "installs": {"total": 788, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1, 3, 1, 0, 0, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0], "platform": "Windows"}, {"totals": [0, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 4, 1, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 0, 0, 1, 2, 2, 1, 0, 1, 0, 0, 3, 0, 0, 1, 1, 0, 0], "platform": "OS X"}, {"totals": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 1, 0, 0, 1], "platform": "Linux"}]}, "windows": 380, "linux": 138, "osx": 270}, "removed": false, "first_seen": "2017-01-18T14:30:27Z", "description": "A Sublime Text plugin to manage your snippets", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "1.1.1", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/math2001/BetterSnippetManager/master/README.md", "labels": ["snippets", "utilities", "file open", "code navigation", "utils", "file creation"], "missing_error": "", "previous_names": []}