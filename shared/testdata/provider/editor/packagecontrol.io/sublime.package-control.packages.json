{"last_seen": "2018-06-23T05:50:27Z", "buy": null, "installs_rank": 2347, "st_versions": [2, 3], "donate": null, "issues": "https://github.com/patriciogonzalezvivo/sublime-glslViewer/issues", "authors": ["patriciogonzalezvivo"], "trending_rank": null, "homepage": "https://packagecontrol.io/packages/glslViewer", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/patriciogonzalezvivo/sublime-glslViewer"], "is_missing": false, "platforms_display": ["OS X", "Linux"], "name": "glslViewer", "last_modified": "2016-01-01T20:38:56Z", "platforms": ["osx", "linux"], "readme_html": "<div><h1>GLSL Viewer plugin for Sublime Text</h1>\n\n<p><img src=\"/readmes/img/c3767b47d7951e2fc5500a0038e527cee63e87cc.gif\" alt=\"\"></p>\n\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=4BQMKQJDQ9XH6\"><img src=\"/readmes/img/1b47cf9a26e146334f99a2a10df8c504288c58f3.gif\" alt=\"Donate\"></a></p>\n\n<p>Sublime Text plugin for live-coding GLSL Shaders using glslViewer ( MACOS X and Linux only).</p>\n\n<h2>Installation</h2>\n\n<ol><li><p>Install <a href=\"https://github.com/patriciogonzalezvivo/glslViewer\">glslViewer</a>. By default it will be installed on <code>/usr/local/bin</code> if that's not the case edit it the <code>glslViewer.sublime-settings</code> file once you finish this steps.</p></li>\n<li><p>You can choose to install the plugin it self with <a href=\"https://packagecontrol.io/\">Package Control</a> or by cloning <a href=\"https://github.com/patriciogonzalezvivo/sublime-glslViewer\">this repository</a> on you <code>Packages</code> Folder. For example:</p></li>\n</ol><div class=\"highlight\"><pre><span class=\"nb\">cd</span> ~/Library/Application Support/Sublime Text 2/Packages/\ngit clone https://github.com/patriciogonzalezvivo/sublime-glslViewer.git\n</pre></div>\n\n<h2>Usage</h2>\n\n<p>Every time you open a <code>.frag</code> or <code>.fs</code> file it will render it through <code>glslViewer</code> which will reload the shader every time you save it.</p>\n\n<p>If the shader contain any <code>uniform sampler2D</code>, a input label will apear down your Sublime Windows where you can enter the absolute or relative path to the image you want to load.</p>\n\n<p>Also if you have a <code>.vert</code> file and/or 3D model (<code>.ply</code> or <code>.obj</code>) with the same name it will open them automatically. </p>\n\n<p><img src=\"/readmes/img/e370f3e2e2ae0439a414a131cff4d0fd517d2e93.gif\" alt=\"\"></p>\n\n<h2>Extra commands</h2>\n\n<p>This plugin adds a GLSL <em>Build System</em> to re lunch <code>glslViewer</code> by pressing <code>Ctr</code>+<code>b</code> and also adds a command to <em>\u201ccreate a new fragment shader template for glslViewer\u201d</em> you can use to start working on a new shader.</p>\n\n<h2>Suggestions</h2>\n\n<p>This plugin plays really well with this two other plugins:</p>\n\n<ul><li><p><a href=\"https://github.com/euler0/sublime-glsl\">Open\u200bGL Shading Language (GLSL)</a></p></li>\n<li><p><a href=\"https://packagecontrol.io/packages/auto-save\">Auto-save</a></p></li>\n</ul><h2>License</h2>\n\n<p><a href=\"https://raw.githubusercontent.com/patriciogonzalezvivo/sublime-glslViewer/master/LICENSE\">MIT License</a></p>\n\n<h2>Author</h2>\n\n<p>glslViewer and this plugin was created and maintained by <a href=\"http://https://twitter.com/patriciogv\">Patricio Gonzalez Vivo</a>: <a href=\"https://github.com/patriciogonzalezvivo\">github</a> | <a href=\"http://https://twitter.com/patriciogv\">twitter</a> | <a href=\"http://patricio.io\">website</a></p></div>", "installs": {"total": 1449, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "platform": "Windows"}, {"totals": [0, 0, 0, 0, 2, 1, 1, 0, 0, 2, 1, 3, 0, 0, 1, 6, 1, 4, 0, 4, 2, 3, 0, 5, 2, 2, 1, 1, 2, 2, 4, 3, 2, 2, 1, 3, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2], "platform": "OS X"}, {"totals": [0, 1, 0, 0, 0, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 2, 3, 0, 1, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 3], "platform": "Linux"}]}, "windows": 5, "linux": 458, "osx": 986}, "removed": false, "first_seen": "2015-04-26T17:21:41Z", "description": "Sublime Text 2/3 plugin for live coding GLSL Shaders", "z_value": null, "versions": [{"platforms": ["osx", "linux"], "st_versions": [2, 3], "version": "0.5.1", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/patriciogonzalezvivo/sublime-glslViewer/master/README.md", "labels": [], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:16:13Z", "buy": null, "installs_rank": 2488, "st_versions": [3], "donate": null, "issues": "https://github.com/oleg-shilo/sublime-codemap/issues", "authors": ["oleg-shilo"], "trending_rank": null, "homepage": "https://github.com/oleg-shilo/sublime-codemap", "sources": ["https://packagecontrol.io/repository.json", "https://github.com/oleg-shilo/sublime-codemap"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "CodeMap", "last_modified": "2018-01-08T02:52:21Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>Sublime CodeMap</h1>\n\n<p>A plugin for displaying the code map (code structure tree) in the <a href=\"http://sublimetext.com\" title=\"Sublime Text\">Sublime Text 3</a> editor.</p>\n\n<p>This plugin is a port of <a href=\"https://marketplace.visualstudio.com/items?itemName=OlegShilo.PyMap\">PyMap</a> Visual Studio extension.</p>\n\n<p>Plugin currently supports building the code tree for Python. Support for C# is in the pipeline. The design of plugin allows integration of the user defined <em>tree building</em> algorithm for other languages. The <em>custom syntax</em> integration infrastructure and and samples will  be available in the next release.</p>\n\n<ul><li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#command-palette\">Command Palette</a></li>\n<li><a href=\"#custom-mapping\">Custom mapping</a>\n\n<ul><li><a href=\"#custom-mapper\">Custom mapper</a></li>\n<li><a href=\"#universal-mapper\">Universal Mapper</a></li>\n<li><a href=\"#map-depth\">Map depth</a></li>\n</ul></li>\n<li><a href=\"#navigation-with-keyboard\">Navigation with Keyboard</a></li>\n<li><a href=\"#settings\">Settings</a></li>\n</ul><p><a name=\"installation\"></a></p>\n\n<h2>Installation</h2>\n\n<p>Note the plugin was developed and tested against ST3 but not ST2.</p>\n\n<p><em><strong>Package Control</strong></em></p>\n\n<p>You can install the pluging <a href=\"https://packagecontrol.io/packages/CodeMap\">Package Control</a>.</p>\n\n<p><em><strong>Manual</strong></em></p>\n\n<ul><li>Remove the package, if installed, using Package Control.</li>\n<li>Add a repository: <code>https://github.com/oleg-shilo/sublime-codemap.git</code></li>\n<li>Install <code>sublime-codemap</code> with Package Control.</li>\n<li>Restart Sublime editor if required</li>\n</ul><p>You can also install the plugin by cloning <code>sublime-codemap</code> repository into your Packages folder or manually placing the download package there.</p>\n\n<p><a name=\"usage\"></a></p>\n\n<h2>Usage</h2>\n\n<p>The plugin uses a dedicated view group <strong>Code - Map</strong> (on right side) to mimic a \u201cside bar\u201d with the content (code tree) that represents code structure of the active view content in the primary view group.</p>\n\n<p>The code tree automatically refreshes on saving the active document or switching the tabs. The usage is quite simple. You can double-click a node in the code tree and this will trigger navigation to the corresponding area in the code (in active document). Alternatively you can synchronize code tree node selection with the current caret position in the document by triggering <code>sync_code_map</code> command either from <em>Command Palette</em> or by the configured shortcut.</p>\n\n<p>To start working with CodeMap just make the map view visible (e.g. [alt+m, alt+m]) and set the focus to the code view.</p>\n\n<p><img src=\"/readmes/img/7ac145343bab608b7f72eb319698d43d085aa355.gif\" alt=\"\"></p>\n\n<p><a name=\"command-palette\"></a></p>\n\n<h2>Command Palette</h2>\n\n<p>Press <code>cmd+shift+p</code>. Type <code>codemap</code> to see the available commands:</p>\n\n<ul><li><p><em><strong>Toggle Visibility</strong></em> - Show/Hide CodeMap view.\nThe CodeMap view is always placed in the most right column (group) of the active window. If <code>show_in_new_group</code> is set to <code>true</code>, a new group will be created.<br>\nDefault keybinding is <strong><code>Alt+m  Alt+m</code></strong></p></li>\n<li><p><em><strong>Reveal in CodeMap</strong></em> - Select code tree node that corresponds the caret position in the code (active view).<br>\nDefault keybinding is <strong><code>Alt+m  Alt+.</code></strong></p></li>\n<li><p><em><strong>Render From View</strong></em> - Attempt to render CodeMap from a view that isn't bound to a phisycal file.<br>\nDefault keybinding is <strong><code>Alt+m  Alt+,</code></strong></p></li>\n</ul><p><a name=\"custom-mapping\"></a></p>\n\n<h2>Custom mapping</h2>\n\n<p><a name=\"custom-mapper\"></a></p>\n\n<h3>Custom mapper</h3>\n\n<p>You can extend the built-in functionality with custom mappers. A Custom Mapper is a Python script, which defines a mandatory <code>def generate(file)</code> routine that analyses a given file content and produces a 'code map' representing the content structure.</p>\n\n<p>You can find the <a href=\"https://github.com/oleg-shilo/sublime-codemap/blob/master/custom_mappers/md.py\">md.py</a> sample in the source code. This mapper builds the list of markdown sections in the given text file.\nIn order to activate the mapper its script needs to be properly named and placed in the special folder: <code>&lt;Packages&gt;\\User\\CodeMap\\custom_mappers</code>. The name of the mapper file must follow a special naming convention:\n<code>\"&lt;extension&gt;.py\"</code></p>\n\n<p>Example: <code>\"%APPDATA%\\Sublime Text 3\\Packages\\User\\CodeMap\\custom_mappers\\md.py\"</code></p>\n\n<p>You can associate a syntax with the custom mapper, so that the CodeMap will use it for rendering the map content. Custom syntaxes can also be put in <code>Packages\\User\\CodeMap\\custom_languages</code>. The syntax association must be specified in the custom mapper itself:</p>\n<div class=\"highlight\"><pre><span class=\"n\">map_syntax</span> <span class=\"o\">=</span> <span class=\"s\">'Packages/Python/Python.tmLanguage'</span>\n</pre></div>\n\n<p>Python syntax seems to be a good highlighting schema for majority of mapping scenarios.</p>\n\n<p><a name=\"universal-mapper\"></a></p>\n\n<h3>Universal Mapper</h3>\n\n<p>The <em>universal mapper</em> is a generic Regex based mapper that can be used as an alternative for dedicated custom mappers. The mapping algorithm(s) of the <em>universal mapper</em> is defined in the plugin settings, and is extension-dependent.</p>\n\n<p>The plugin will always try to use <em>universal mapper</em> mapping algorithm first, and only if it's not available the plugin will try to locate a dedicated custom mapper based on the active document file extension. Full instructions on how to make a custom mapper using the <em>universal mapper</em> are included in the settings file.</p>\n\n<p>Note that if you use a custom mapper for an extension that is already defined in the <em>universal mapper</em> settings, the latter will have precedence. Comment out the extension in the <em>universal mapper</em> section to use your custom mapper in its place.</p>\n\n<p>The advantage of using the <em>universal mapper</em> (and define new rules for it when needed) is that it supports by default the map depth system, with which you can alter the depth of the displayed map. Custom mappers need to support this system internally.</p>\n\n<p>Below is a simple example of adding <em>universal mapper</em> support for TypeScript:</p>\n\n<p>Add file extension (e.g. '<em>ts</em>') and name of the algorithm section to the <code>syntaxes</code> section:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"syntaxes\"</span><span class=\"err\">:</span>     <span class=\"p\">[</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"universal\"</span><span class=\"p\">,</span>   <span class=\"s2\">\"\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"txt\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"typescript\"</span><span class=\"p\">,</span>  <span class=\"s2\">\"ts\"</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">\"python\"</span><span class=\"p\">,</span>      <span class=\"s2\">\"py\"</span><span class=\"p\">]</span>\n                <span class=\"p\">]</span><span class=\"err\">,</span>\n</pre></div>\n\n<p>Create a new <code>typescript</code> section an fill it with the the following content:</p>\n<div class=\"highlight\"><pre><span class=\"s2\">\"typescript\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"regex\"</span><span class=\"p\">:</span>\n                <span class=\"p\">[</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">\"^(class |function |export class |interface ).*$\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"[(:{].*$\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n                        <span class=\"kc\">false</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">],</span>\n                <span class=\"nt\">\"indent\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"obligatory indent\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"empty line in map before\"</span><span class=\"p\">:</span> <span class=\"s2\">\"class\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"line numbers before\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"prefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"suffix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"()\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"syntax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Packages/TypeScript/TypeScript.tmLanguage\"</span>\n             <span class=\"p\">}</span><span class=\"err\">,</span>\n</pre></div>\n\n<p><a name=\"map-depth\"></a></p>\n\n<h3>Map depth</h3>\n\n<p>If using the <em>universal mapper</em> or a dedicated mapper that supports it, you can change the depth of the displayed map. Default hotkeys are:</p>\n<div class=\"highlight\"><pre>{ \"keys\": [\"alt+m\", \"alt+left\"], \"command\": \"code_map_decrease_depth\" },\n{ \"keys\": [\"alt+m\", \"alt+right\"],\"command\": \"code_map_increase_depth\" },\n</pre></div>\n\n<p><a name=\"navigation-with-keyboard\"></a></p>\n\n<h2>Navigation with Keyboard</h2>\n\n<p>You can start keyboard navigation with <strong><code>Al+m, Alt+n</code></strong>. Then use the following keys: </p>\n<div class=\"highlight\"><pre>up / down                   move by definition\nalt+up / alt+down           move by class\nenter/escape/left/right     focus back on edited view\n</pre></div>\n\n<p><a name=\"settings\"></a></p>\n\n<h2>Settings</h2>\n\n<p>You can also configure plugin to:\n1. Hide the group on closing the CodeMap view when it is the only view in the group.\n2. Always place CodeMap view in the individual most-right column.\n3. CodeMap group width.\n4. Assign a custom font size/font face/margin for the CodeMap.</p>\n\n<p><em>code</em>_<em>map.sublime-settings</em></p>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"close_empty_group_on_closing_map\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"show_in_new_group\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"s2\">\"codemap_width\"</span><span class=\"o\">:</span> <span class=\"mf\">0.17</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_font_size\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_font_face\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Verily Serif Mono\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"codemap_margin\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div></div>", "installs": {"total": 1231, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [0, 5, 1, 3, 4, 0, 0, 1, 1, 8, 1, 3, 4, 0, 1, 3, 1, 3, 4, 1, 4, 1, 2, 1, 1, 0, 1, 1, 0, 2, 5, 4, 3, 0, 3, 0, 2, 5, 1, 6, 2, 2, 1, 2, 1, 4], "platform": "Windows"}, {"totals": [0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 0, 0, 0, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], "platform": "OS X"}, {"totals": [0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 4, 2, 1], "platform": "Linux"}]}, "windows": 669, "linux": 258, "osx": 304}, "removed": false, "first_seen": "2017-03-03T17:16:27Z", "description": "CodeMap - is a ST3 plugin for showing the code tree representing the code structure of the active view/document", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [3], "version": "1.0.13", "prerelease_version": null}], "readme": "https://raw.githubusercontent.com/oleg-shilo/sublime-codemap/master/README.md", "labels": [], "missing_error": "", "previous_names": []}
{"last_seen": "2018-06-23T06:29:12Z", "buy": null, "installs_rank": 497, "st_versions": [2, 3], "donate": null, "issues": "https://bitbucket.org/bteryek/openinbrowser/issues", "authors": ["bteryek"], "trending_rank": null, "homepage": "http://idevelopsolutions.com/OpenInBrowser", "sources": ["https://packagecontrol.io/repository.json", "https://bitbucket.org/bteryek/openinbrowser"], "is_missing": false, "platforms_display": ["Windows", "OS X", "Linux"], "name": "OpenInBrowser", "last_modified": "2013-09-13T19:49:48Z", "platforms": ["windows", "osx", "linux"], "readme_html": "<div><h1>OpenInBrowser</h1>\n\n<p>On save opens up a user defined URL in your default web browser.</p>\n\n<h2>Introduction</h2>\n\n<p>There are several plugins out there that will refresh or open up a file in the browser. However, they are usually limited to opening open the file you are working on. </p>\n\n<p>With OpenInBrowser, when you save a file, we scan your configuration settings and look for a match against the current file. If the file you saved matches the pattern you specified, OpenInBrowser will open up the associated url in your default web browser.</p>\n\n<h2>Configuration</h2>\n\n<p>The configuration file is an array of objects. Each object has a single key, which is the pattern to test the saved file against. The value is the associated url you want to open if the file is matched.</p>\n\n<p>Each object is checked in the order they appear in the array. Once it finds a match, it will execute and open up the associated url.</p>\n<div class=\"highlight\"><pre>[\n\n    {\"index.html\": \"http://idevelopsolutions.com\"},\n    {\"index.(html|php)\": \"http://idevelopsolutions.com\"},\n    {\"index.(html|php)\": \"http://idevelopsolutions.com/index.$1\"}\n\n]\n</pre></div>\n\n<p><strong>Simple Match</strong></p>\n<div class=\"highlight\"><pre>{\"index.html\": \"http://idevelopsolutions.com\"}\n</pre></div>\n\n<p>If you are working on a file that matches the \u201cindex.html\u201d pattern, it will open up <a href=\"http://idevelopsolutions.com\">http://idevelopsolutions.com</a></p>\n\n<p><strong>Regex Match</strong></p>\n<div class=\"highlight\"><pre>{\"index.(html|php)\": \"http://idevelopsolutions.com\"}\n</pre></div>\n\n<p>Files that match \u201cindex.html\u201d or \u201cindex.php\u201d will open up <a href=\"http://idevelopsolutions.com\">http://idevelopsolutions.com</a></p>\n\n<p><strong>Advanced Regex Match</strong></p>\n\n<p>If you want to use groups from the regex pattern in the url you wish to open, use <strong>$n</strong> syntax to backreference a group.</p>\n<div class=\"highlight\"><pre>{\"index.(html|php)\": \"http://idevelopsolutions.com/index.$1\"}\n</pre></div>\n\n<p>Files that match index.html or index.php will open up </p>\n\n<ul><li><a href=\"http://idevelopsolutions.com/index.html\">http://idevelopsolutions.com/index.html</a> or </li>\n<li><a href=\"http://idevelopsolutions.com/index.php\">http://idevelopsolutions.com/index.php</a></li>\n</ul><h2>Install From Package Control</h2>\n\n<ol><li>Search for OpenInBrowser.</li>\n</ol><h2>Install Manually:</h2>\n\n<ol><li>Create a folder in the packages directory called \u201cOpenInBrowser\u201d</li>\n<li>Download the latest tag, unzip and place the files in the  \u201cOpenInBrowser\u201d directory.</li>\n</ol><h2>Video Tutorial</h2>\n\n<p><a href=\"http://www.youtube.com/watch?v=MCmIazjhq9A\">http://www.youtube.com/watch?v=MCmIazjhq9A</a></p>\n\n<h2>Install Duplicate Tab Plugin for your Browser</h2>\n\n<p>It is highly recommended you install a duplicate tab plugin for your web browser if you do not want to keep opening up the same url(s) in new tabs.</p>\n\n<p>I wrote a Chrome plugin that works with OpenInBrowser Plugin:</p>\n\n<ul><li><a href=\"https://chrome.google.com/webstore/detail/openinbrowser/ddjnoikeiiiialgjgmanaienongjhamn\">OpenInBrowser Chrome Plugin</a></li>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/duplicate-tab-closer/?src=api\">Firefox</a></li>\n</ul><p>Check out my other plugin:</p>\n\n<ul><li><a href=\"https://bitbucket.org/bteryek/phpcodegen\">PhpCodeGen</a></li>\n</ul></div>", "installs": {"total": 24233, "daily": {"dates": ["2018-06-23", "2018-06-22", "2018-06-21", "2018-06-20", "2018-06-19", "2018-06-18", "2018-06-17", "2018-06-16", "2018-06-15", "2018-06-14", "2018-06-13", "2018-06-12", "2018-06-11", "2018-06-10", "2018-06-09", "2018-06-08", "2018-06-07", "2018-06-06", "2018-06-05", "2018-06-04", "2018-06-03", "2018-06-02", "2018-06-01", "2018-05-31", "2018-05-30", "2018-05-29", "2018-05-28", "2018-05-27", "2018-05-26", "2018-05-25", "2018-05-24", "2018-05-23", "2018-05-22", "2018-05-21", "2018-05-20", "2018-05-19", "2018-05-18", "2018-05-17", "2018-05-16", "2018-05-15", "2018-05-14", "2018-05-13", "2018-05-12", "2018-05-11", "2018-05-10", "2018-05-09"], "data": [{"totals": [3, 7, 9, 17, 19, 12, 8, 10, 12, 8, 13, 13, 11, 5, 15, 5, 6, 17, 31, 13, 5, 14, 7, 10, 10, 13, 11, 10, 9, 8, 4, 30, 13, 16, 8, 6, 8, 16, 18, 16, 13, 8, 13, 13, 20, 17], "platform": "Windows"}, {"totals": [1, 1, 2, 5, 4, 2, 0, 1, 4, 2, 4, 1, 6, 1, 1, 2, 1, 6, 4, 7, 3, 1, 2, 3, 4, 2, 2, 2, 2, 1, 5, 5, 1, 0, 1, 1, 2, 4, 8, 0, 2, 1, 2, 3, 4, 2], "platform": "OS X"}, {"totals": [0, 0, 2, 0, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 2, 6, 1, 3, 3, 0, 0, 2, 0, 2, 0, 3, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 2, 2, 1, 0, 3, 5, 0], "platform": "Linux"}]}, "windows": 16164, "linux": 2403, "osx": 5666}, "removed": false, "first_seen": "2013-09-10T22:25:16Z", "description": "On save opens up a user defined URL in your default web browser", "z_value": null, "versions": [{"platforms": ["*"], "st_versions": [2, 3], "version": "1.0.1", "prerelease_version": null}], "readme": "https://bitbucket.org/bteryek/openinbrowser/raw/master/README.md", "labels": ["browser", "open in browser", "refresh", "preview", "browser preview"], "missing_error": "", "previous_names": []}