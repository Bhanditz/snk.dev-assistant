def replace_ansi_escapes(name:str, srcs:list, deps:list=None, visibility:list=None):
    """Replaces ANSI escape sequences in a source file.

    In the file they're written as pseudo-shell variables like ${BOLD_WHITE},
    which is a lot easier to read than \\x1b[37;1m.

    Does not currently support passing arbitrary rules to `srcs`. For various minor
    reasons (mostly involving Go coverage/tracebacks) it would not be ideal to
    rename them too much anyway.
    """
    # Backslashes are deliberately repeated many times to get through all the levels of escaping needed.
    REPLACEMENTS = {
        'BOLD': '\\\\x1b[1m',
        'BOLD_GREY': '\\\\x1b[30;1m',
        'BOLD_RED': '\\\\x1b[31;1m',
        'BOLD_GREEN': '\\\\x1b[32;1m',
        'BOLD_YELLOW': '\\\\x1b[33;1m',
        'BOLD_BLUE': '\\\\x1b[34;1m',
        'BOLD_MAGENTA': '\\\\x1b[35;1m',
        'BOLD_CYAN': '\\\\x1b[36;1m',
        'BOLD_WHITE': '\\\\x1b[37;1m',
        'GREY': '\\\\x1b[30m',
        'RED': '\\\\x1b[31m',
        'GREEN': '\\\\x1b[32m',
        'YELLOW': '\\\\x1b[33m',
        'BLUE': '\\\\x1b[34m',
        'MAGENTA': '\\\\x1b[35m',
        'CYAN': '\\\\x1b[36m',
        'WHITE': '\\\\x1b[37m',
        'WHITE_ON_RED': '\\\\x1b[37;41;1m',
        'RED_NO_BG': '\\\\x1b[31;49;1m',
        'RESET': '\\\\x1b[0m',
        'ERASE_AFTER': '\\\\x1b[K',
    }
    return build_rule(
        name = name,
        srcs = srcs,
        outs = srcs,
        cmd = 'for SRC in $SRCS; do sed %s $SRC > $(basename $SRC); done' % ' '.join(["-e 's/${%s}/%s/g'" % (k, v) for k, v in sorted(REPLACEMENTS.items())]),
        deps = deps,
        visibility = visibility,
    )
